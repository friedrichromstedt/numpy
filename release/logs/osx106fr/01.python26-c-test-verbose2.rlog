test_arrayprint.TestArrayRepr.test_nan_inf ... ok
Ticket 844. ... ok
test_blasdot.test_blasdot_used ... ok
test_from_object_array (test_defchararray.TestBasic) ... ok
test_from_object_array_unicode (test_defchararray.TestBasic) ... ok
test_from_string (test_defchararray.TestBasic) ... ok
test_from_string_array (test_defchararray.TestBasic) ... ok
test_from_unicode (test_defchararray.TestBasic) ... ok
test_from_unicode_array (test_defchararray.TestBasic) ... ok
test_unicode_upconvert (test_defchararray.TestBasic) ... ok
test_it (test_defchararray.TestChar) ... ok
test_equal (test_defchararray.TestComparisons) ... ok
test_greater (test_defchararray.TestComparisons) ... ok
test_greater_equal (test_defchararray.TestComparisons) ... ok
test_less (test_defchararray.TestComparisons) ... ok
test_less_equal (test_defchararray.TestComparisons) ... ok
test_not_equal (test_defchararray.TestComparisons) ... ok
test_equal (test_defchararray.TestComparisonsMixed1) ... ok
test_greater (test_defchararray.TestComparisonsMixed1) ... ok
test_greater_equal (test_defchararray.TestComparisonsMixed1) ... ok
test_less (test_defchararray.TestComparisonsMixed1) ... ok
test_less_equal (test_defchararray.TestComparisonsMixed1) ... ok
test_not_equal (test_defchararray.TestComparisonsMixed1) ... ok
test_equal (test_defchararray.TestComparisonsMixed2) ... ok
test_greater (test_defchararray.TestComparisonsMixed2) ... ok
test_greater_equal (test_defchararray.TestComparisonsMixed2) ... ok
test_less (test_defchararray.TestComparisonsMixed2) ... ok
test_less_equal (test_defchararray.TestComparisonsMixed2) ... ok
test_not_equal (test_defchararray.TestComparisonsMixed2) ... ok
test_count (test_defchararray.TestInformation) ... ok
test_endswith (test_defchararray.TestInformation) ... ok
test_find (test_defchararray.TestInformation) ... ok
test_index (test_defchararray.TestInformation) ... ok
test_isalnum (test_defchararray.TestInformation) ... ok
test_isalpha (test_defchararray.TestInformation) ... ok
test_isdigit (test_defchararray.TestInformation) ... ok
test_islower (test_defchararray.TestInformation) ... ok
test_isspace (test_defchararray.TestInformation) ... ok
test_istitle (test_defchararray.TestInformation) ... ok
test_isupper (test_defchararray.TestInformation) ... ok
test_len (test_defchararray.TestInformation) ... ok
test_rfind (test_defchararray.TestInformation) ... ok
test_rindex (test_defchararray.TestInformation) ... ok
test_startswith (test_defchararray.TestInformation) ... ok
test_capitalize (test_defchararray.TestMethods) ... ok
test_center (test_defchararray.TestMethods) ... ok
test_decode (test_defchararray.TestMethods) ... ok
test_encode (test_defchararray.TestMethods) ... ok
test_expandtabs (test_defchararray.TestMethods) ... ok
test_isdecimal (test_defchararray.TestMethods) ... ok
test_isnumeric (test_defchararray.TestMethods) ... ok
test_join (test_defchararray.TestMethods) ... ok
test_ljust (test_defchararray.TestMethods) ... ok
test_lower (test_defchararray.TestMethods) ... ok
test_lstrip (test_defchararray.TestMethods) ... ok
test_partition (test_defchararray.TestMethods) ... ok
test_replace (test_defchararray.TestMethods) ... ok
test_rjust (test_defchararray.TestMethods) ... ok
test_rpartition (test_defchararray.TestMethods) ... ok
test_rsplit (test_defchararray.TestMethods) ... ok
test_rstrip (test_defchararray.TestMethods) ... ok
test_split (test_defchararray.TestMethods) ... ok
test_splitlines (test_defchararray.TestMethods) ... ok
test_strip (test_defchararray.TestMethods) ... ok
test_swapcase (test_defchararray.TestMethods) ... ok
test_title (test_defchararray.TestMethods) ... ok
test_upper (test_defchararray.TestMethods) ... ok
test_add (test_defchararray.TestOperations) ... ok
Ticket #856 ... ok
test_mul (test_defchararray.TestOperations) ... ok
test_radd (test_defchararray.TestOperations) ... ok
test_rmod (test_defchararray.TestOperations) ... ok
test_rmul (test_defchararray.TestOperations) ... ok
test_broadcast_error (test_defchararray.TestVecString) ... ok
test_invalid_args_tuple (test_defchararray.TestVecString) ... ok
test_invalid_function_args (test_defchararray.TestVecString) ... ok
test_invalid_result_type (test_defchararray.TestVecString) ... ok
test_invalid_type_descr (test_defchararray.TestVecString) ... ok
test_non_existent_method (test_defchararray.TestVecString) ... ok
test_non_string_array (test_defchararray.TestVecString) ... ok
test1 (test_defchararray.TestWhitespace) ... ok
Only test hash runs at all. ... ok
test_metadata_rejects_nondict (test_dtype.TestMetadata) ... ok
test_metadata_takes_dict (test_dtype.TestMetadata) ... ok
test_nested_metadata (test_dtype.TestMetadata) ... ok
test_no_metadata (test_dtype.TestMetadata) ... ok
test1 (test_dtype.TestMonsterType) ... ok
test_different_names (test_dtype.TestRecord) ... ok
test_different_titles (test_dtype.TestRecord) ... ok
Test whether equivalent record dtypes hash the same. ... ok
Test if an appropriate exception is raised when passing bad values to ... ok
Test whether equivalent subarray dtypes hash the same. ... ok
Test whether different subarray dtypes hash differently. ... ok
test_single_subarray (test_dtype.TestSubarray) ... ok
test_divide (test_errstate.TestErrstate) ... ok
test_errcall (test_errstate.TestErrstate) ... ok
test_invalid (test_errstate.TestErrstate) ... ok
test_basic (test_function_base.TestLinspace) ... ok
test_corner (test_function_base.TestLinspace) ... ok
test_type (test_function_base.TestLinspace) ... ok
test_basic (test_function_base.TestLogspace) ... ok
test_singleton (test_getlimits.TestDouble) ... ok
test_basic (test_getlimits.TestIinfo) ... ok
test_unsigned_max (test_getlimits.TestIinfo) ... ok
test_singleton (test_getlimits.TestLongdouble) ... ok
test_singleton (test_getlimits.TestPythonFloat) ... ok
test_singleton (test_getlimits.TestSingle) ... ok
test_getlimits.test_instances ... ok
Regression testing for #759: instanciating MachAr for dtype = ... ok
test_attributes (test_memmap.TestMemmap) ... ok
test_del (test_memmap.TestMemmap) ... ok
test_filename (test_memmap.TestMemmap) ... ok
test_filename_fileobj (test_memmap.TestMemmap) ... ok
test_flush (test_memmap.TestMemmap) ... ok
test_open_with_filename (test_memmap.TestMemmap) ... ok
test_roundtrip (test_memmap.TestMemmap) ... ok
test_all (test_multiarray.TestArgmax) ... ok
test_combinations (test_multiarray.TestArgmax) ... ok
test_attributes (test_multiarray.TestAttributes) ... ok
test_dtypeattr (test_multiarray.TestAttributes) ... ok
test_fill (test_multiarray.TestAttributes) ... ok
test_set_stridesattr (test_multiarray.TestAttributes) ... ok
test_stridesattr (test_multiarray.TestAttributes) ... ok
test_test_interning (test_multiarray.TestBool) ... ok
test_basic (test_multiarray.TestChoose) ... ok
test_broadcast1 (test_multiarray.TestChoose) ... ok
test_broadcast2 (test_multiarray.TestChoose) ... ok
test_basic (test_multiarray.TestClip) ... ok
test_max_or_min (test_multiarray.TestClip) ... ok
test_record_array (test_multiarray.TestClip) ... ok
test_from_attribute (test_multiarray.TestCreation) ... ok
test_from_string (test_multiarray.TestCreation) ... ok
test_construction (test_multiarray.TestDtypedescr) ... ok
test_list (test_multiarray.TestFancyIndexing) ... ok
test_tuple (test_multiarray.TestFancyIndexing) ... ok
test_otherflags (test_multiarray.TestFlags) ... ok
test_writeable (test_multiarray.TestFlags) ... ok
test_ip_basic (test_multiarray.TestFromBuffer) ... ok
test_multiarray.TestIO.test_ascii ... ok
test_multiarray.TestIO.test_binary ... ok
test_multiarray.TestIO.test_counted_string ... ok
test_multiarray.TestIO.test_counted_string_with_ws ... ok
test_multiarray.TestIO.test_dtype ... ok
test_multiarray.TestIO.test_empty_files_binary ... ok
test_multiarray.TestIO.test_empty_files_text ... ok
test_multiarray.TestIO.test_inf ... ok
test_multiarray.TestIO.test_locale ... ok
test_multiarray.TestIO.test_long_sep ... ok
test_multiarray.TestIO.test_malformed ... ok
test_multiarray.TestIO.test_nan ... ok
test_multiarray.TestIO.test_numbers ... ok
test_multiarray.TestIO.test_roundtrip_binary_str ... ok
test_multiarray.TestIO.test_roundtrip_file ... ok
test_multiarray.TestIO.test_roundtrip_filename ... ok
test_multiarray.TestIO.test_roundtrip_repr ... ok
test_multiarray.TestIO.test_roundtrip_str ... ok
test_multiarray.TestIO.test_string ... ok
test_multiarray.TestIO.test_string_with_ws ... ok
test_multiarray.TestIO.test_tofile_format ... ok
test_multiarray.TestIO.test_tofile_sep ... ok
test_basic (test_multiarray.TestLexsort) ... ok
test_argsort (test_multiarray.TestMethods) ... ok
test_dot (test_multiarray.TestMethods) ... ok
test_flatten (test_multiarray.TestMethods) ... ok
test_searchsorted (test_multiarray.TestMethods) ... ok
test_sort (test_multiarray.TestMethods) ... ok
test_sort_order (test_multiarray.TestMethods) ... ok
test_test_round (test_multiarray.TestMethods) ... ok
test_transpose (test_multiarray.TestMethods) ... ok
test_axis (test_multiarray.TestMinMax) ... ok
test_scalar (test_multiarray.TestMinMax) ... ok
test_circular (test_multiarray.TestNeighborhoodIter) ... ok
test_circular_object (test_multiarray.TestNeighborhoodIter) ... ok
test_mirror (test_multiarray.TestNeighborhoodIter) ... ok
test_mirror2d (test_multiarray.TestNeighborhoodIter) ... ok
test_mirror2d_object (test_multiarray.TestNeighborhoodIter) ... ok
test_mirror_object (test_multiarray.TestNeighborhoodIter) ... ok
test_simple2d (test_multiarray.TestNeighborhoodIter) ... ok
test_simple2d_object (test_multiarray.TestNeighborhoodIter) ... ok
test_simple_float (test_multiarray.TestNeighborhoodIter) ... ok
test_simple_object (test_multiarray.TestNeighborhoodIter) ... ok
test_multiarray.TestNewBufferProtocol.test_export_discontiguous ... ok
test_multiarray.TestNewBufferProtocol.test_export_endian ... ok
test_multiarray.TestNewBufferProtocol.test_export_record ... ok
test_multiarray.TestNewBufferProtocol.test_export_simple_1d ... ok
test_multiarray.TestNewBufferProtocol.test_export_simple_nd ... ok
test_multiarray.TestNewBufferProtocol.test_export_subarray ... ok
test_multiarray.TestNewBufferProtocol.test_padding ... ok
test_multiarray.TestNewBufferProtocol.test_reference_leak ... ok
test_multiarray.TestNewBufferProtocol.test_roundtrip ... ok
test_basic (test_multiarray.TestNewaxis) ... ok
test_multiarray.TestPEP3118Dtype.test_byteorder_inside_struct ... ok
test_multiarray.TestPEP3118Dtype.test_intra_padding ... ok
test_multiarray.TestPEP3118Dtype.test_native_padding ... ok
test_multiarray.TestPEP3118Dtype.test_native_padding_2 ... ok
test_multiarray.TestPEP3118Dtype.test_trailing_padding ... ok
test_roundtrip (test_multiarray.TestPickling) ... ok
test_version0_float32 (test_multiarray.TestPickling) ... ok
test_version0_int8 (test_multiarray.TestPickling) ... ok
test_version0_object (test_multiarray.TestPickling) ... ok
test_version1_float32 (test_multiarray.TestPickling) ... ok
test_version1_int8 (test_multiarray.TestPickling) ... ok
test_version1_object (test_multiarray.TestPickling) ... ok
test_ip_byteorder (test_multiarray.TestPutmask) ... ok
test_ip_types (test_multiarray.TestPutmask) ... ok
test_mask_size (test_multiarray.TestPutmask) ... ok
test_masked_array (test_multiarray.TestPutmask) ... ok
test_record_array (test_multiarray.TestPutmask) ... ok
test_field_rename (test_multiarray.TestRecord) ... ok
test_unicode_field_names (test_multiarray.TestRecord) ... ok
test_unicode_field_titles (test_multiarray.TestRecord) ... ok
test_basic (test_multiarray.TestResize) ... ok
test_check_reference (test_multiarray.TestResize) ... ok
test_freeform_shape (test_multiarray.TestResize) ... ok
test_int_shape (test_multiarray.TestResize) ... ok
test_invalid_arguements (test_multiarray.TestResize) ... ok
test_none_shape (test_multiarray.TestResize) ... ok
test_zeros_appended (test_multiarray.TestResize) ... ok
test_ellipsis_subscript (test_multiarray.TestScalarIndexing) ... ok
test_empty_subscript (test_multiarray.TestScalarIndexing) ... ok
test_invalid_newaxis (test_multiarray.TestScalarIndexing) ... ok
test_invalid_subscript (test_multiarray.TestScalarIndexing) ... ok
test_invalid_subscript_assignment (test_multiarray.TestScalarIndexing) ... ok
test_newaxis (test_multiarray.TestScalarIndexing) ... ok
test_simple_circular (test_multiarray.TestStackedNeighborhoodIter) ... ok
test_simple_const (test_multiarray.TestStackedNeighborhoodIter) ... ok
test_simple_mirror (test_multiarray.TestStackedNeighborhoodIter) ... ok
test_simple_strict_within (test_multiarray.TestStackedNeighborhoodIter) ... ok
test_subclass (test_multiarray.TestStats) ... ok
test_mixed (test_multiarray.TestStringCompare) ... ok
test_string (test_multiarray.TestStringCompare) ... ok
test_unicode (test_multiarray.TestStringCompare) ... ok
test_test_zero_rank (test_multiarray.TestSubscripting) ... ok
test_1d (test_multiarray.TestSummarization) ... ok
test_2d (test_multiarray.TestSummarization) ... ok
test_clip (test_multiarray.TestTake) ... ok
test_ip_byteorder (test_multiarray.TestTake) ... ok
test_ip_types (test_multiarray.TestTake) ... ok
test_raise (test_multiarray.TestTake) ... ok
test_record_array (test_multiarray.TestTake) ... ok
test_wrap (test_multiarray.TestTake) ... ok
test_basic (test_multiarray.TestView) ... ok
test_multiarray.TestWarnings.test_complex_warning ... ok
test_constructor (test_multiarray.TestZeroRank) ... ok
test_ellipsis_subscript (test_multiarray.TestZeroRank) ... ok
test_ellipsis_subscript_assignment (test_multiarray.TestZeroRank) ... ok
test_empty_subscript (test_multiarray.TestZeroRank) ... ok
test_empty_subscript_assignment (test_multiarray.TestZeroRank) ... ok
test_invalid_newaxis (test_multiarray.TestZeroRank) ... ok
test_invalid_subscript (test_multiarray.TestZeroRank) ... ok
test_invalid_subscript_assignment (test_multiarray.TestZeroRank) ... ok
test_newaxis (test_multiarray.TestZeroRank) ... ok
test_output (test_multiarray.TestZeroRank) ... ok
test_numeric.TestArgwhere.test_2D ... ok
test_numeric.TestArgwhere.test_list ... ok
test_array_equal (test_numeric.TestArrayComparisons) ... ok
test_array_equiv (test_numeric.TestArrayComparisons) ... ok
test_base3 (test_numeric.TestBaseRepr) ... ok
test_negative (test_numeric.TestBaseRepr) ... ok
test_positive (test_numeric.TestBaseRepr) ... ok
test_large (test_numeric.TestBinaryRepr) ... ok
test_negative (test_numeric.TestBinaryRepr) ... ok
test_zero (test_numeric.TestBinaryRepr) ... ok
test_bitwise_and (test_numeric.TestBoolScalar) ... ok
test_bitwise_or (test_numeric.TestBoolScalar) ... ok
test_bitwise_xor (test_numeric.TestBoolScalar) ... ok
test_logical (test_numeric.TestBoolScalar) ... ok
Test native double input with array min/max. ... ok
Ensure that the clip() function takes an out= argument. ... ok
Test native double input with array min/max ... ok
Test native double input with scalar min/max ... ok
Test clip for non contiguous native input and native scalar min/max. ... ok
Test native int32 input with double array min/max and int32 out ... ok
Test native double input with scalar min/max and int out ... ok
Test native double input with scalar min/max ... ok
Test native int32 input with double min/max and int32 out ... ok
Test native int32 input with int32 scalar min/max and int64 out ... ok
Test non contiguous double input with double scalar min/max in-place. ... ok
Test native complex input with native double scalar min/max. ... ok
Test native double input with scalar min/max. ... ok
Test native double input with array min/max in-place. ... ok
Test native double input with scalar min/max in-place. ... ok
Test native int input with scalar min/max. ... ok
Test native int32 input with double min/max and int32 out. ... ok
Test native double input with scalar min/max and int out. ... ok
Test native in32 input with double array min/max and int32 out. ... ok
Test native int32 input with int32 scalar min/max and int64 out. ... ok
Test non native double input with scalar min/max. ... ok
Test native double input with scalar min/max. ... ok
Test native double input with scalar min/max. ... ok
Test native int32 input with int32 scalar min/max. ... ok
Test native int32 input with float64 scalar min/max. ... ok
Test native int32 input with float32 scalar min/max. ... ok
Test native int32 with double arrays min/max. ... ok
Test native with NON native scalar min/max. ... ok
Test NON native with native array min/max. ... ok
Test NON native with native scalar min/max. ... ok
Test native with NON native array min/max. ... ok
Test native int32 with float min/max and float out for output argument. ... ok
Test non native with native scalar, min/max, out non native ... ok
Test native int32 input and min/max and float out ... ok
test_complex (test_numeric.TestCorrelate) ... ok
test_float (test_numeric.TestCorrelate) ... ok
test_object (test_numeric.TestCorrelate) ... ok
test_complex (test_numeric.TestCorrelateNew) ... ok
test_float (test_numeric.TestCorrelateNew) ... ok
test_object (test_numeric.TestCorrelateNew) ... ok
test_all (test_numeric.TestDot) ... ok
test_columnvect1 (test_numeric.TestDot) ... ok
test_columnvect2 (test_numeric.TestDot) ... ok
test_matmat (test_numeric.TestDot) ... ok
test_matvec (test_numeric.TestDot) ... ok
test_matvec2 (test_numeric.TestDot) ... ok
test_vecmat (test_numeric.TestDot) ... ok
test_vecmat2 (test_numeric.TestDot) ... ok
test_vecmat3 (test_numeric.TestDot) ... ok
test_vecobject (test_numeric.TestDot) ... ok
test_vecscalar (test_numeric.TestDot) ... ok
test_vecscalar2 (test_numeric.TestDot) ... ok
test_vecvecinner (test_numeric.TestDot) ... ok
test_vecvecouter (test_numeric.TestDot) ... ok
test_lengths (test_numeric.TestFromiter) ... ok
test_types (test_numeric.TestFromiter) ... ok
test_values (test_numeric.TestFromiter) ... ok
test_boolean (test_numeric.TestIndex) ... ok
test_empty_like (test_numeric.TestLikeFuncs) ... ok
test_zeros_like (test_numeric.TestLikeFuncs) ... ok
test_cumproduct (test_numeric.TestNonarrayArgs) ... ok
test_mean (test_numeric.TestNonarrayArgs) ... ok
test_size (test_numeric.TestNonarrayArgs) ... ok
test_squeeze (test_numeric.TestNonarrayArgs) ... ok
test_std (test_numeric.TestNonarrayArgs) ... ok
test_var (test_numeric.TestNonarrayArgs) ... ok
test_copies (test_numeric.TestResize) ... ok
test_zeroresize (test_numeric.TestResize) ... ok
test_divide_err (test_numeric.TestSeterr) ... ok
test_set (test_numeric.TestSeterr) ... ok
test_basic (test_numeric.TestStdVar) ... ok
test_ddof1 (test_numeric.TestStdVar) ... ok
test_ddof2 (test_numeric.TestStdVar) ... ok
test_basic (test_numeric.TestStdVarComplex) ... ok
test_numeric.TestStringFunction.test_set_string_function ... ok
Parametric test factory. ... ok
Parametric test factory. ... ok
test_no_parameter_modification (test_numeric.test_allclose_inf) ... ok
test_scalar_loses1 (test_numerictypes.TestCommonType) ... ok
test_scalar_loses2 (test_numerictypes.TestCommonType) ... ok
test_scalar_wins (test_numerictypes.TestCommonType) ... ok
test_scalar_wins2 (test_numerictypes.TestCommonType) ... ok
test_scalar_wins3 (test_numerictypes.TestCommonType) ... ok
test_assign (test_numerictypes.TestEmptyField) ... ok
test_no_tuple (test_numerictypes.TestMultipleFields) ... ok
test_return (test_numerictypes.TestMultipleFields) ... ok
Check creation from list of list of tuples ... ok
Check creation from list of tuples ... ok
Check creation from tuples ... ok
Check creation from list of list of tuples ... ok
Check creation from list of tuples ... ok
Check creation from tuples ... ok
Check creation from list of list of tuples ... ok
Check creation from list of tuples ... ok
Check creation from tuples ... ok
Check creation from list of list of tuples ... ok
Check creation from list of tuples ... ok
Check creation from tuples ... ok
Check creation of 0-dimensional objects ... ok
Check creation of multi-dimensional objects ... ok
Check creation of single-dimensional objects ... ok
Check creation of 0-dimensional objects ... ok
Check creation of multi-dimensional objects ... ok
Check creation of single-dimensional objects ... ok
Check reading the top fields of a nested array ... ok
Check reading the nested fields of a nested array (1st level) ... ok
Check access nested descriptors of a nested array (1st level) ... ok
Check reading the nested fields of a nested array (2nd level) ... ok
Check access nested descriptors of a nested array (2nd level) ... ok
Check reading the top fields of a nested array ... ok
Check reading the nested fields of a nested array (1st level) ... ok
Check access nested descriptors of a nested array (1st level) ... ok
Check reading the nested fields of a nested array (2nd level) ... ok
Check access nested descriptors of a nested array (2nd level) ... ok
test_access_fields (test_numerictypes.test_read_values_plain_multiple) ... ok
test_access_fields (test_numerictypes.test_read_values_plain_single) ... ok
Check formatting. ... ok
Check formatting. ... ok
Check formatting. ... ok
Check formatting of nan & inf. ... ok
Check formatting of nan & inf. ... ok
Check formatting of nan & inf. ... ok
Check formatting of complex types. ... ok
Check formatting of complex types. ... ok
Check formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check inf/nan formatting of complex types. ... ok
Check formatting when using print ... ok
Check formatting when using print ... ok
Check formatting when using print ... ok
Check formatting when using print ... ok
Check formatting when using print ... ok
Check formatting when using print ... ok
test_print.test_locale_single ... ok
test_print.test_locale_double ... ok
test_print.test_locale_longdouble ... ok
test_fromrecords (test_records.TestFromrecords) ... ok
test_fromrecords_with_explicit_dtype (test_records.TestFromrecords) ... ok
test_method_array (test_records.TestFromrecords) ... ok
test_method_array2 (test_records.TestFromrecords) ... ok
test_recarray_conflict_fields (test_records.TestFromrecords) ... ok
test_recarray_from_names (test_records.TestFromrecords) ... ok
test_recarray_from_obj (test_records.TestFromrecords) ... ok
test_recarray_from_repr (test_records.TestFromrecords) ... ok
test_recarray_fromarrays (test_records.TestFromrecords) ... ok
test_recarray_fromfile (test_records.TestFromrecords) ... ok
test_recarray_slices (test_records.TestFromrecords) ... ok
test_assignment1 (test_records.TestRecord) ... ok
test_assignment2 (test_records.TestRecord) ... ok
test_invalid_assignment (test_records.TestRecord) ... ok
Ticket #1431. Current behavior deprecated in numpy 1.5 ... ok
test_records.test_find_duplicate ... ok
test_0d_string_scalar (test_regression.TestRegression) ... ok
Ticket #143 ... ok
Ticket #111 ... ok
Ticket #616 ... ok
Ticket #119 ... ok
Ticket #546 ... ok
Ticket #516 ... ok
Ticket #1078: segfaults when creating an array with a sequence of 0d ... ok
Ticket #1081: weird array with strange input... ... KNOWNFAIL: Fix this for 1.5.0.
Make sure optimization is not called in this case. ... ok
Ticket #947. ... ok
Ticket #840 - order should be an invalid keyword. ... ok
Ticket #501 ... ok
Ticket #1080. ... ok
Ticket #788, changeset r5155 ... ok
Ticket #791 ... ok
Ticket #151 ... ok
test_binary_repr_0_width (test_regression.TestRegression) ... ok
Ticket #950 ... ok
Ticket #60 ... ok
test_bool_indexing_invalid_nr_elements (test_regression.TestRegression) ... ok
Ticket #194 ... ok
test_buffer_hashlib (test_regression.TestRegression) ... ok
Ticket #1259 ... ok
test_char_array_creation (test_regression.TestRegression) ... ok
Ticket #50 ... ok
Ticket #246 ... ok
Ticket #222 ... ok
test_complex_dtype_printing (test_regression.TestRegression) ... ok
test_complex_nan_maximum (test_regression.TestRegression) ... ok
test_complex_scalar_complex_cast (test_regression.TestRegression) ... ok
test_complex_scalar_warning (test_regression.TestRegression) ... ok
Ticket #789, changeset 5217. ... ok
Convolve should raise an error for empty input array. ... ok
Ticket #658 ... ok
Ticket #771: strides are not set correctly when reshaping 0-sized ... ok
Ticket #658 ... ok
Test for ticket #551, changeset r5140 ... ok
Ticket #588 ... ok
Ticket #1106. ... ok
Ticket #35 ... ok
Ticket #335 ... ok
Ticket #344 ... ok
Ticket #334 ... ok
test_duplicate_field_names_assign (test_regression.TestRegression) ... ok
Ticket #1254 ... ok
test_empty_array_type (test_regression.TestRegression) ... ok
Ticket #105 ... ok
test_eq_string_and_object_array (test_regression.TestRegression) ... ok
Ticket #955 ... ok
Ticket #302 ... ok
Correct behaviour of ticket #194 ... ok
Ticket #657 ... ok
test_flat_index_byteswap (test_regression.TestRegression) ... ok
Ticket #640, floats from string ... ok
Ticket #674 ... ok
Ticket #816 ... ok
Ticket #882 ... ok
test_fromfile_tofile_seeks (test_regression.TestRegression) ... ok
Ticket #1058 ... ok
test_fromiter_comparison (test_regression.TestRegression) ... ok
Ticket #503 ... ok
test_fromstring (test_regression.TestRegression) ... ok
test_fromstring_crash (test_regression.TestRegression) ... ok
Ticket #128 ... ok
Regression test for #1062. ... ok
Ticket #64 ... ok
Ticket #65 ... ok
Ticket #99 ... ok
Ticket #3 ... ok
Ticket #483 ... ok
Lexsort memory error ... ok
Ticket #1217, don't segfault. ... ok
test_log1p_compiler_shenanigans (test_regression.TestRegression) ... ok
Ticket #714 ... ok
Ticket #243 ... ok
Ticket #196 ... ok
Ticket #327 ... ok
Ticket 702 ... ok
Ticket #562 ... ok
Ticket #126 ... ok
Ticket #106 ... ok
Ticket #93 ... ok
Ticket #7 ... ok
Ticket #330 ... ok
test_mem_fromiter_invalid_dtype_string (test_regression.TestRegression) ... ok
Ticket #298 ... ok
Ticket #583 ... ok
Ticket #603 ... ok
Ticket #514 ... ok
test_method_args (test_regression.TestRegression) ... ok
Ticket #1267 ... ok
Ticket #1198 and #1267 ... ok
Ticket #1267 ... ok
test_mixed_string_unicode_array_creation (test_regression.TestRegression) ... ok
Ticket #449 ... ok
Ticket #273 ... ok
Ticket #324 ... ok
Ticket #49 ... ok
Ticket #413 ... ok
Ticket #58. ... ok
Non-native endian arrays were incorrectly filled with scalars before ... ok
Ticket #341 ... ok
Ticket #1405 ... ok
test_object_argmax (test_regression.TestRegression) ... ok
test_object_array_assign (test_regression.TestRegression) ... ok
Ticket #86 ... ok
Ticket #270 ... ok
Ticket #711 ... ok
Ticket #633 ... ok
Ticket #239 ... ok
Ticket #1235. ... ok
test_object_casting (test_regression.TestRegression) ... ok
Ticket #251 ... ok
Ticket #16 ... ok
Ticket #555 ... ok
Ticket #374 ... ok
Ticket #322 ... ok
Ticket #160 ... ok
Ticket #312 ... ok
Ticket #372 ... ok
Ticket #202 ... ok
Ticket #793, changeset r5215 ... ok
Ticket #40 ... ok
Ticket #713 ... ok
Changeset #3443 ... ok
Ticket #352 ... ok
Make sure reshape order works. ... ok
Ticket #67 ... ok
Ticket #72 ... ok
test_searchsorted_variable_length (test_regression.TestRegression) ... ok
test_sign_bit (test_regression.TestRegression) ... ok
Ticket 794. ... ok
Ticket #1317. ... ok
Ticket #47 ... ok
Ticket #133 ... ok
test_startswith (test_regression.TestRegression) ... ok
Changeset 3557 ... ok
Check argsort for strings containing zeros. ... ok
Ticket #342 ... ok
Ticket #540 ... ok
Check sort for strings containing zeros. ... ok
Ticket #1299 ... ok
Ticket #1299 second test ... ok
test_subclass_int_tuple_assignment (test_regression.TestRegression) ... ok
Ticket #265 ... ok
Ensure that 'take' honours output parameter. ... ok
test_take_refcount (test_regression.TestRegression) ... ok
test_ticket_1434 (test_regression.TestRegression) ... ok
test_ticket_1538 (test_regression.TestRegression) ... ok
test_ticket_1539 (test_regression.TestRegression) ... ok
Fix in r2836 ... ok
Ticket #31 ... ok
test_ufunc_no_unnecessary_views (test_regression.TestRegression) ... ok
test_uint64_from_negative (test_regression.TestRegression) ... ok
test_uint_int_conversion (test_regression.TestRegression) ... ok
Ticket #825 ... ok
Ticket #600 ... ok
Ticket #190 ... ok
Ticket #79 ... ok
Ticket #1240. ... ok
Implemented in r2840 ... ok
test_void_copyswap (test_regression.TestRegression) ... ok
No ticket ... ok
Ticket #205 ... ok
Regression test for #1061. ... ok
Ticket #43 ... ok
test_int_from_long (test_scalarmath.TestConversion) ... ok
test_large_types (test_scalarmath.TestPower) ... ok
test_small_types (test_scalarmath.TestPower) ... ok
test_float_repr (test_scalarmath.TestRepr) ... ok
test_type_add (test_scalarmath.TestTypes) ... ok
test_type_create (test_scalarmath.TestTypes) ... ok
test_types (test_scalarmath.TestTypes) ... ok
test_0D_array (test_shape_base.TestAtleast1d) ... ok
test_1D_array (test_shape_base.TestAtleast1d) ... ok
test_2D_array (test_shape_base.TestAtleast1d) ... ok
test_3D_array (test_shape_base.TestAtleast1d) ... ok
Test to make sure equivalent Travis O's r1array function ... ok
test_0D_array (test_shape_base.TestAtleast2d) ... ok
test_1D_array (test_shape_base.TestAtleast2d) ... ok
test_2D_array (test_shape_base.TestAtleast2d) ... ok
test_3D_array (test_shape_base.TestAtleast2d) ... ok
Test to make sure equivalent Travis O's r2array function ... ok
test_0D_array (test_shape_base.TestAtleast3d) ... ok
test_1D_array (test_shape_base.TestAtleast3d) ... ok
test_2D_array (test_shape_base.TestAtleast3d) ... ok
test_3D_array (test_shape_base.TestAtleast3d) ... ok
test_0D_array (test_shape_base.TestHstack) ... ok
test_1D_array (test_shape_base.TestHstack) ... ok
test_2D_array (test_shape_base.TestHstack) ... ok
test_0D_array (test_shape_base.TestVstack) ... ok
test_1D_array (test_shape_base.TestVstack) ... ok
test_2D_array (test_shape_base.TestVstack) ... ok
test_2D_array2 (test_shape_base.TestVstack) ... ok
Try to check presence and results of all ufuncs. ... ok
test_broadcast (test_ufunc.TestUfunc) ... ok
test_endian (test_ufunc.TestUfunc) ... ok
Test generic loops. ... ok
test_get_signature (test_ufunc.TestUfunc) ... ok
test_incontiguous_array (test_ufunc.TestUfunc) ... ok
test_inner1d (test_ufunc.TestUfunc) ... ok
test_innerwt (test_ufunc.TestUfunc) ... ok
test_matrix_multiply (test_ufunc.TestUfunc) ... ok
test_output_argument (test_ufunc.TestUfunc) ... ok
test_reduceat_shifting_sum (test_ufunc.TestUfunc) ... ok
test_signature (test_ufunc.TestUfunc) ... ok
test_type_cast (test_ufunc.TestUfunc) ... ok
test_any_ninf (test_umath.TestArctan2SpecialValues) ... ok
test_any_pinf (test_umath.TestArctan2SpecialValues) ... ok
test_inf_any (test_umath.TestArctan2SpecialValues) ... ok
test_inf_ninf (test_umath.TestArctan2SpecialValues) ... ok
test_inf_pinf (test_umath.TestArctan2SpecialValues) ... ok
test_nan_any (test_umath.TestArctan2SpecialValues) ... ok
test_negative_zero (test_umath.TestArctan2SpecialValues) ... ok
test_one_one (test_umath.TestArctan2SpecialValues) ... ok
test_positive_zero (test_umath.TestArctan2SpecialValues) ... ok
test_zero_negative (test_umath.TestArctan2SpecialValues) ... ok
test_zero_nzero (test_umath.TestArctan2SpecialValues) ... ok
test_zero_positive (test_umath.TestArctan2SpecialValues) ... ok
test_zero_pzero (test_umath.TestArctan2SpecialValues) ... ok
test_attributes (test_umath.TestAttributes) ... ok
test_mixed (test_umath.TestChoose) ... ok
test_umath.TestComplexFunctions.test_against_cmath ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'log'>, -0.5, 1j, 1, -1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'log2'>, -0.5, 1j, 1, -1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'log10'>, -0.5, 1j, 1, -1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'log1p'>, -1.5, 1j, 1, -1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'sqrt'>, -0.5, 1j, 1, -1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arcsin'>, [-2, 2], [1j, -1j], 1, -1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arccos'>, [-2, 2], [1j, -1j], 1, -1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arctan'>, [-2j, 2j], [1, -1], -1, 1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arcsinh'>, [-2j, 2j], [-1, 1], -1, 1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arccosh'>, [-1, 0.5], [1j, 1j], 1, -1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arctanh'>, [-2, 2], [1j, -1j], 1, -1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arcsin'>, [-2j, 2j], [1, 1], 1, 1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arccos'>, [-2j, 2j], [1, 1], 1, 1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arctan'>, [-2, 2], [1j, 1j], 1, 1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arcsinh'>, [-2, 2, 0], [1j, 1j, 1], 1, 1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arccosh'>, [-2j, 2j, 2], [1, 1, 1j], 1, 1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts(<ufunc 'arctanh'>, [-2j, 2j, 0], [1, 1, 1j], 1, 1) ... ok
test_umath.TestComplexFunctions.test_branch_cuts_failing ... KNOWNFAIL: These branch cuts are known to fail
test_umath.TestComplexFunctions.test_it ... ok
test_umath.TestComplexFunctions.test_loss_of_precision(<type 'numpy.complex64'>,) ... ok
test_umath.TestComplexFunctions.test_loss_of_precision(<type 'numpy.complex128'>,) ... ok
test_umath.TestComplexFunctions.test_loss_of_precision_longcomplex ... ok
test_umath.TestComplexFunctions.test_precisions_consistent ... ok
test_degrees (test_umath.TestDegrees) ... ok
test_division_complex (test_umath.TestDivision) ... ok
test_division_int (test_umath.TestDivision) ... ok
test_floor_division_complex (test_umath.TestDivision) ... ok
test_exp_values (test_umath.TestExp) ... ok
test_exp2_values (test_umath.TestExp2) ... ok
test_expm1 (test_umath.TestExpm1) ... ok
test_floating_point (test_umath.TestFloatingPoint) ... ok
test_complex_nans (test_umath.TestFmax) ... ok
test_float_nans (test_umath.TestFmax) ... ok
test_reduce_complex (test_umath.TestFmax) ... ok
test_complex_nans (test_umath.TestFmin) ... ok
test_float_nans (test_umath.TestFmin) ... ok
test_reduce_complex (test_umath.TestFmin) ... ok
test_simple (test_umath.TestHypot) ... ok
test_nan_outputs (test_umath.TestHypotSpecialValues) ... ok
test_ldexp (test_umath.TestLdexp) ... ok
test_ldexp_overflow (test_umath.TestLdexp) ... ok
test_log_values (test_umath.TestLog) ... ok
test_log1p (test_umath.TestLog1p) ... ok
test_log2_values (test_umath.TestLog2) ... ok
test_umath.TestLogAddExp.test_inf ... ok
test_umath.TestLogAddExp.test_logaddexp_range ... ok
test_umath.TestLogAddExp.test_logaddexp_values ... ok
test_umath.TestLogAddExp.test_nan ... ok
test_umath.TestLogAddExp2.test_inf ... ok
test_umath.TestLogAddExp2.test_logaddexp2_range ... ok
test_umath.TestLogAddExp2.test_logaddexp2_values ... ok
test_umath.TestLogAddExp2.test_nan ... ok
test_complex_nans (test_umath.TestMaximum) ... ok
test_float_nans (test_umath.TestMaximum) ... ok
test_reduce_complex (test_umath.TestMaximum) ... ok
test_complex_nans (test_umath.TestMinimum) ... ok
test_float_nans (test_umath.TestMinimum) ... ok
test_reduce_complex (test_umath.TestMinimum) ... ok
test_power_complex (test_umath.TestPower) ... ok
test_power_float (test_umath.TestPower) ... ok
test_power_zero (test_umath.TestPower) ... ok
test_radians (test_umath.TestRadians) ... ok
test_sign (test_umath.TestSign) ... ok
test_array_with_context (test_umath.TestSpecialMethods) ... ok
test_default_prepare (test_umath.TestSpecialMethods) ... ok
test_failing_prepare (test_umath.TestSpecialMethods) ... ok
test_failing_wrap (test_umath.TestSpecialMethods) ... ok
test_old_wrap (test_umath.TestSpecialMethods) ... ok
test_prepare (test_umath.TestSpecialMethods) ... ok
test_priority (test_umath.TestSpecialMethods) ... ok
test_priority_with_scalar (test_umath.TestSpecialMethods) ... ok
test_wrap (test_umath.TestSpecialMethods) ... ok
test_wrap_with_iterable (test_umath.TestSpecialMethods) ... ok
test_subclass_op (test_umath.TestSubclass) ... ok
test_umath.test_copysign ... ok
test_umath.test_nextafter ... ok
test_umath.test_nextafterf ... ok
test_umath.test_nextafterl ... ok
test_umath.test_spacing ... ok
test_umath.test_spacingf ... ok
test_umath.test_spacingl ... ok
test_umath.test_spacing_gfortran ... ok
test_umath.test_nextafter_vs_spacing ... ok
Check np.nan is a positive nan. ... ok
Test bug in reduceat when structured arrays are not copied. ... ok
test_umath.test_complex_nan_comparisons ... ok
test_umath_complex.TestCabs.test_cabs_inf_nan(<ufunc 'absolute'>, nan, nan, nan) ... ok
test_umath_complex.TestCabs.test_cabs_inf_nan(<ufunc 'absolute'>, nan, nan, nan) ... ok
test_umath_complex.TestCabs.test_cabs_inf_nan(<ufunc 'absolute'>, inf, nan, inf) ... ok
test_umath_complex.TestCabs.test_cabs_inf_nan(<ufunc 'absolute'>, -inf, nan, inf) ... ok
test_umath_complex.TestCabs.test_cabs_inf_nan(<function f at 0x15b94b0>, nan, nan, nan) ... ok
test_umath_complex.TestCabs.test_cabs_inf_nan(<function f at 0x15b94b0>, nan, nan, nan) ... ok
test_umath_complex.TestCabs.test_cabs_inf_nan(<function f at 0x15b94b0>, inf, nan, inf) ... ok
test_umath_complex.TestCabs.test_cabs_inf_nan(<function f at 0x15b94b0>, -inf, nan, inf) ... ok
test_umath_complex.TestCabs.test_fabs ... ok
test_umath_complex.TestCabs.test_simple ... ok
test_umath_complex.TestCarg.test_simple ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, -inf, 1, 3.1415926535897931, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, -inf, -1, -3.1415926535897931, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, inf, 1, 0.0, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, inf, -1, -0.0, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, 1, inf, 1.5707963267948966, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, 1, -inf, -1.5707963267948966, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, -inf, inf, 2.3561944901923448, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, -inf, -inf, -2.3561944901923448, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, inf, inf, 0.78539816339744828, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, inf, -inf, -0.78539816339744828, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, nan, 0, nan, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, 0, nan, nan, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, nan, inf, nan, False) ... ok
test_umath_complex.TestCarg.test_special_values(<ufunc '_arg'>, inf, nan, nan, False) ... ok
test_umath_complex.TestCarg.test_zero ... KNOWNFAIL: Complex arithmetic with signed zero is buggy on most implementation
test_umath_complex.TestCexp.test_simple(<ufunc 'exp'>, 1, 0, 2.7182818284590451, 0, False) ... ok
test_umath_complex.TestCexp.test_simple(<ufunc 'exp'>, 0, 1, 0.54030230586813977, 0.8414709848078965, False) ... ok
test_umath_complex.TestCexp.test_simple(<ufunc 'exp'>, 1, 1, 1.4686939399158851, 2.2873552871788423, False) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, 0.0, 0, 1, 0, False) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, -0.0, 0, 1, 0, False) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, 1, inf, nan, nan) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, -1, inf, nan, nan) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, 0, inf, nan, nan) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, inf, 0, inf, 0) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, -inf, 1, 0.0, 0.0) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, -inf, 2.3561944901923448, -0.0, 0.0) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, inf, 1, inf, inf) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, inf, 2.3561944901923448, -inf, inf) ... ok
test_umath_complex.TestCexp.test_special_values(None,) ... ok
test_umath_complex.TestCexp.test_special_values(None,) ... ok
test_umath_complex.TestCexp.test_special_values(None,) ... ok
test_umath_complex.TestCexp.test_special_values(None,) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, nan, 1, nan, nan) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, nan, -1, nan, nan) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, nan, inf, nan, nan) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, nan, -inf, nan, nan) ... ok
test_umath_complex.TestCexp.test_special_values(<ufunc 'exp'>, nan, nan, nan, nan) ... ok
test_umath_complex.TestCexp.test_special_values2 ... KNOWNFAIL: cexp(nan + 0I) is wrong on most implementations
test_simple (test_umath_complex.TestClog) ... ok
test_special_values (test_umath_complex.TestClog) ... ok
test_array (test_umath_complex.TestCpow) ... ok
test_scalar (test_umath_complex.TestCpow) ... ok
test_simple (test_umath_complex.TestCpow) ... ok
test_umath_complex.TestCsqrt.test_simple(<ufunc 'sqrt'>, 1, 0, 1, 0) ... ok
test_umath_complex.TestCsqrt.test_simple(<ufunc 'sqrt'>, 0, 1, 0.70710678118654757, 0.70710678118654757, False) ... ok
test_umath_complex.TestCsqrt.test_simple(<ufunc 'sqrt'>, -1, 0, 0, 1) ... ok
test_umath_complex.TestCsqrt.test_simple_conjugate(<function f at 0x15b9130>, 1, 1, 1.09868411346781, -0.45508986056222733, False) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, 0.0, 0, 0, 0) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, -0.0, 0, 0, 0) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, 1, inf, inf, inf) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, -1, inf, inf, inf) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, 0.0, inf, inf, inf) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, -0.0, inf, inf, inf) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, inf, inf, inf, inf) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, -inf, inf, inf, inf) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, nan, inf, inf, inf) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, 1, nan, nan, nan) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, -1, nan, nan, nan) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, 0, nan, nan, nan) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, -inf, 1, 0.0, inf) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, inf, 1, inf, 0.0) ... ok
test_umath_complex.TestCsqrt.test_special_values(None,) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, inf, nan, inf, nan) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, nan, 0, nan, nan) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, nan, 1, nan, nan) ... ok
test_umath_complex.TestCsqrt.test_special_values(<ufunc 'sqrt'>, nan, nan, nan, nan) ... ok
Check assignment of 0-dimensional objects with values ... ok
Check assignment of multi-dimensional objects with values ... ok
Check assignment of single-dimensional objects with values ... ok
Check assignment of 0-dimensional objects with values ... ok
Check assignment of multi-dimensional objects with values ... ok
Check assignment of single-dimensional objects with values ... ok
Check assignment of 0-dimensional objects with values ... ok
Check assignment of multi-dimensional objects with values ... ok
Check assignment of single-dimensional objects with values ... ok
Check assignment of 0-dimensional objects with values ... ok
Check assignment of multi-dimensional objects with values ... ok
Check assignment of single-dimensional objects with values ... ok
Check assignment of 0-dimensional objects with values ... ok
Check assignment of multi-dimensional objects with values ... ok
Check assignment of single-dimensional objects with values ... ok
Check assignment of 0-dimensional objects with values ... ok
Check assignment of multi-dimensional objects with values ... ok
Check assignment of single-dimensional objects with values ... ok
Check byteorder of 0-dimensional objects ... ok
Check byteorder of multi-dimensional objects ... ok
Check byteorder of single-dimensional objects ... ok
Check byteorder of 0-dimensional objects ... ok
Check byteorder of multi-dimensional objects ... ok
Check byteorder of single-dimensional objects ... ok
Check byteorder of 0-dimensional objects ... ok
Check byteorder of multi-dimensional objects ... ok
Check byteorder of single-dimensional objects ... ok
Check byteorder of 0-dimensional objects ... ok
Check byteorder of multi-dimensional objects ... ok
Check byteorder of single-dimensional objects ... ok
Check byteorder of 0-dimensional objects ... ok
Check byteorder of multi-dimensional objects ... ok
Check byteorder of single-dimensional objects ... ok
Check byteorder of 0-dimensional objects ... ok
Check byteorder of multi-dimensional objects ... ok
Check byteorder of single-dimensional objects ... ok
Check creation of 0-dimensional objects with values ... ok
Check creation of multi-dimensional objects with values ... ok
Check creation of single-dimensional objects with values ... ok
Check creation of 0-dimensional objects with values ... ok
Check creation of multi-dimensional objects with values ... ok
Check creation of single-dimensional objects with values ... ok
Check creation of 0-dimensional objects with values ... ok
Check creation of multi-dimensional objects with values ... ok
Check creation of single-dimensional objects with values ... ok
Check creation of 0-dimensional objects with values ... ok
Check creation of multi-dimensional objects with values ... ok
Check creation of single-dimensional objects with values ... ok
Check creation of 0-dimensional objects with values ... ok
Check creation of multi-dimensional objects with values ... ok
Check creation of single-dimensional objects with values ... ok
Check creation of 0-dimensional objects with values ... ok
Check creation of multi-dimensional objects with values ... ok
Check creation of single-dimensional objects with values ... ok
Check creation of 0-dimensional objects ... ok
Check creation of multi-dimensional objects ... ok
Check creation of single-dimensional objects ... ok
Check creation of 0-dimensional objects ... ok
Check creation of multi-dimensional objects ... ok
Check creation of single-dimensional objects ... ok
Check creation of 0-dimensional objects ... ok
Check creation of multi-dimensional objects ... ok
Check creation of single-dimensional objects ... ok
test_g77_version (test_fcompiler_gnu.TestG77Versions) ... ok
test_not_g77 (test_fcompiler_gnu.TestG77Versions) ... ok
test_gfortran_version (test_fcompiler_gnu.TestGortranVersions) ... ok
test_not_gfortran (test_fcompiler_gnu.TestGortranVersions) ... ok
test_1 (test_misc_util.TestAppendpath) ... ok
test_2 (test_misc_util.TestAppendpath) ... ok
test_3 (test_misc_util.TestAppendpath) ... ok
test_gpaths (test_misc_util.TestGpaths) ... ok
test_1 (test_misc_util.TestMinrelpath) ... ok
test_simple (test_npy_pkg_config.TestLibraryInfo) ... ok
test_simple_variable (test_npy_pkg_config.TestLibraryInfo) ... ok
test_simple_cflags (test_npy_pkg_config.TestParseFlags) ... ok
test_simple_lflags (test_npy_pkg_config.TestParseFlags) ... ok
SKIP: No C compiler available
test_basic (test_fftpack.TestFFT1D) ... ok
test_fft_n (test_fftpack.TestFFTShift) ... ok
test_definition (test_helper.TestFFTFreq) ... ok
test_axes_keyword (test_helper.TestFFTShift) ... ok
test_definition (test_helper.TestFFTShift) ... ok
test_inverse (test_helper.TestFFTShift) ... ok
test_InvalidFile (test__datasource.TestDataSourceAbspath) ... ok
test_InvalidHTTP (test__datasource.TestDataSourceAbspath) ... ok
test_ValidFile (test__datasource.TestDataSourceAbspath) ... ok
test_ValidHTTP (test__datasource.TestDataSourceAbspath) ... ok
test_sandboxing (test__datasource.TestDataSourceAbspath) ... ok
test_windows_os_sep (test__datasource.TestDataSourceAbspath) ... ok
test_InvalidFile (test__datasource.TestDataSourceExists) ... ok
test_InvalidHTTP (test__datasource.TestDataSourceExists) ... ok
test_ValidFile (test__datasource.TestDataSourceExists) ... ok
test_ValidHTTP (test__datasource.TestDataSourceExists) ... ok
test_InvalidFile (test__datasource.TestDataSourceOpen) ... ok
test_InvalidHTTP (test__datasource.TestDataSourceOpen) ... ok
test_InvalidHTTPCacheURLError (test__datasource.TestDataSourceOpen) ... ok
test_ValidBz2File (test__datasource.TestDataSourceOpen) ... ok
test_ValidFile (test__datasource.TestDataSourceOpen) ... ok
test_ValidGzipFile (test__datasource.TestDataSourceOpen) ... ok
test_ValidHTTP (test__datasource.TestDataSourceOpen) ... ok
test_DataSourceOpen (test__datasource.TestOpenFunc) ... ok
test_ValidHTTP (test__datasource.TestRepositoryAbspath) ... ok
test_sandboxing (test__datasource.TestRepositoryAbspath) ... ok
test_windows_os_sep (test__datasource.TestRepositoryAbspath) ... ok
test_CachedHTTPFile (test__datasource.TestRepositoryExists) ... ok
test_InvalidFile (test__datasource.TestRepositoryExists) ... ok
test_RemoveHTTPFile (test__datasource.TestRepositoryExists) ... ok
test_ValidFile (test__datasource.TestRepositoryExists) ... ok
Test LineSplitter w/ fixed-width fields ... ok
Test LineSplitter w/o delimiter ... ok
Test LineSplitter on delimiter ... ok
Test space delimiter ... ok
Test tab delimiter ... ok
test_variable_fixed_width (test__iotools.TestLineSplitter) ... ok
Test ndtype on dtypes ... ok
Test has_nested_dtype ... ok
Test case sensitivity ... ok
Test excludelist ... ok
Test validate missing names ... ok
Test validate nb names ... ok
Test validate no names ... ok
Test creation of a StringConverter ... ok
Make sure we don't lose an explicit default ... ok
Check that we don't lose a default of 0 ... ok
Check that we're not losing missing values ... ok
Tests the use of missing values. ... ok
Make sure that string-to-object functions are properly recognized ... ok
Tests the upgrade method. ... ok
Tests updatemapper ... ok
test_ediff1d (test_arraysetops.TestAso) ... ok
test_in1d (test_arraysetops.TestAso) ... ok
test_in1d_char_array (test_arraysetops.TestAso) ... ok
test_intersect1d (test_arraysetops.TestAso) ... ok
test_intersect1d_nu (test_arraysetops.TestAso) ... ok
test_manyways (test_arraysetops.TestAso) ... ok
test_setdiff1d (test_arraysetops.TestAso) ... ok
test_setdiff1d_char_array (test_arraysetops.TestAso) ... ok
test_setmember1d (test_arraysetops.TestAso) ... ok
test_setxor1d (test_arraysetops.TestAso) ... ok
test_union1d (test_arraysetops.TestAso) ... ok
test_unique (test_arraysetops.TestAso) ... ok
test_arrayterator.test ... ok
test_fv (test_financial.TestFinancial) ... ok
test_irr (test_financial.TestFinancial) ... ok
test_mirr (test_financial.TestFinancial) ... ok
test_nper (test_financial.TestFinancial) ... ok
test_nper2 (test_financial.TestFinancial) ... ok
test_npv (test_financial.TestFinancial) ... ok
test_pmt (test_financial.TestFinancial) ... ok
test_pv (test_financial.TestFinancial) ... ok
test_rate (test_financial.TestFinancial) ... ok
test_financial.test_unimplemented ... ok
test_format.test_roundtrip(array([], dtype=uint8), array([], dtype=uint8)) ... ok
test_format.test_roundtrip(array(10, dtype=uint8), array(10, dtype=uint8)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint8), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint8)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=uint8), array([], dtype=uint8)) ... ok
test_format.test_roundtrip(array(10, dtype=uint8), array(10, dtype=uint8)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint8), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint8)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=int8), array([], dtype=int8)) ... ok
test_format.test_roundtrip(array(10, dtype=int8), array(10, dtype=int8)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int8), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int8)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=int8), array([], dtype=int8)) ... ok
test_format.test_roundtrip(array(10, dtype=int8), array(10, dtype=int8)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int8), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int8)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=uint16), array([], dtype=uint16)) ... ok
test_format.test_roundtrip(array(10, dtype=uint16), array(10, dtype=uint16)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint16), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint16)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=uint16), array([], dtype=uint16)) ... ok
test_format.test_roundtrip(array(10, dtype=uint16), array(10, dtype=uint16)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint16), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint16)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=int16), array([], dtype=int16)) ... ok
test_format.test_roundtrip(array(10, dtype=int16), array(10, dtype=int16)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int16), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int16)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=int16), array([], dtype=int16)) ... ok
test_format.test_roundtrip(array(10, dtype=int16), array(10, dtype=int16)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int16), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int16)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=uint32), array([], dtype=uint32)) ... ok
test_format.test_roundtrip(array(10L, dtype=uint32), array(10L, dtype=uint32)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint32), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint32)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=uint32), array([], dtype=uint32)) ... ok
test_format.test_roundtrip(array(10L, dtype=uint32), array(10L, dtype=uint32)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint32), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint32)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=int32), array([], dtype=int32)) ... ok
test_format.test_roundtrip(array(10), array(10)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14]), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=int32), array([], dtype=int32)) ... ok
test_format.test_roundtrip(array(10), array(10)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14]), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=uint64), array([], dtype=uint64)) ... ok
test_format.test_roundtrip(array(10L, dtype=uint64), array(10L, dtype=uint64)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint64), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint64)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=uint64), array([], dtype=uint64)) ... ok
test_format.test_roundtrip(array(10L, dtype=uint64), array(10L, dtype=uint64)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint64), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=uint64)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=int64), array([], dtype=int64)) ... ok
test_format.test_roundtrip(array(10L, dtype=int64), array(10L, dtype=int64)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int64), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int64)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=int64), array([], dtype=int64)) ... ok
test_format.test_roundtrip(array(10L, dtype=int64), array(10L, dtype=int64)) ... ok
test_format.test_roundtrip(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int64), array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14], dtype=int64)) ... ok
test_format.test_roundtrip(array([[ 0,  1,  2,  3,  4], ... ok
test_format.test_roundtrip(array([[ 0,  5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=float32), array([], dtype=float32)) ... ok
test_format.test_roundtrip(array(10.0, dtype=float32), array(10.0, dtype=float32)) ... ok
test_format.test_roundtrip(array([  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10., ... ok
test_format.test_roundtrip(array([[  0.,   1.,   2.,   3.,   4.], ... ok
test_format.test_roundtrip(array([[  0.,   5.,  10.], ... ok
test_format.test_roundtrip(array([[ 10.,  12.,  14.], ... ok
test_format.test_roundtrip(array([], dtype=float32), array([], dtype=float32)) ... ok
test_format.test_roundtrip(array(10.0, dtype=float32), array(10.0, dtype=float32)) ... ok
test_format.test_roundtrip(array([  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10., ... ok
test_format.test_roundtrip(array([[  0.,   1.,   2.,   3.,   4.], ... ok
test_format.test_roundtrip(array([[  0.,   5.,  10.], ... ok
test_format.test_roundtrip(array([[ 10.,  12.,  14.], ... ok
test_format.test_roundtrip(array([], dtype=float64), array([], dtype=float64)) ... ok
test_format.test_roundtrip(array(10.0), array(10.0)) ... ok
test_format.test_roundtrip(array([  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10., ... ok
test_format.test_roundtrip(array([[  0.,   1.,   2.,   3.,   4.], ... ok
test_format.test_roundtrip(array([[  0.,   5.,  10.], ... ok
test_format.test_roundtrip(array([[ 10.,  12.,  14.], ... ok
test_format.test_roundtrip(array([], dtype=float64), array([], dtype=float64)) ... ok
test_format.test_roundtrip(array(10.0), array(10.0)) ... ok
test_format.test_roundtrip(array([  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10., ... ok
test_format.test_roundtrip(array([[  0.,   1.,   2.,   3.,   4.], ... ok
test_format.test_roundtrip(array([[  0.,   5.,  10.], ... ok
test_format.test_roundtrip(array([[ 10.,  12.,  14.], ... ok
test_format.test_roundtrip(array([], dtype=complex64), array([], dtype=complex64)) ... ok
test_format.test_roundtrip(array((10+0j), dtype=complex64), array((10+0j), dtype=complex64)) ... ok
test_format.test_roundtrip(array([  0.+0.j,   1.+0.j,   2.+0.j,   3.+0.j,   4.+0.j,   5.+0.j, ... ok
test_format.test_roundtrip(array([[  0.+0.j,   1.+0.j,   2.+0.j,   3.+0.j,   4.+0.j], ... ok
test_format.test_roundtrip(array([[  0.+0.j,   5.+0.j,  10.+0.j], ... ok
test_format.test_roundtrip(array([[ 10.+0.j,  12.+0.j,  14.+0.j], ... ok
test_format.test_roundtrip(array([], dtype=complex64), array([], dtype=complex64)) ... ok
test_format.test_roundtrip(array((10+0j), dtype=complex64), array((10+0j), dtype=complex64)) ... ok
test_format.test_roundtrip(array([  0.+0.j,   1.+0.j,   2.+0.j,   3.+0.j,   4.+0.j,   5.+0.j, ... ok
test_format.test_roundtrip(array([[  0.+0.j,   1.+0.j,   2.+0.j,   3.+0.j,   4.+0.j], ... ok
test_format.test_roundtrip(array([[  0.+0.j,   5.+0.j,  10.+0.j], ... ok
test_format.test_roundtrip(array([[ 10.+0.j,  12.+0.j,  14.+0.j], ... ok
test_format.test_roundtrip(array([], dtype=complex128), array([], dtype=complex128)) ... ok
test_format.test_roundtrip(array((10+0j)), array((10+0j))) ... ok
test_format.test_roundtrip(array([  0.+0.j,   1.+0.j,   2.+0.j,   3.+0.j,   4.+0.j,   5.+0.j, ... ok
test_format.test_roundtrip(array([[  0.+0.j,   1.+0.j,   2.+0.j,   3.+0.j,   4.+0.j], ... ok
test_format.test_roundtrip(array([[  0.+0.j,   5.+0.j,  10.+0.j], ... ok
test_format.test_roundtrip(array([[ 10.+0.j,  12.+0.j,  14.+0.j], ... ok
test_format.test_roundtrip(array([], dtype=complex128), array([], dtype=complex128)) ... ok
test_format.test_roundtrip(array((10+0j)), array((10+0j))) ... ok
test_format.test_roundtrip(array([  0.+0.j,   1.+0.j,   2.+0.j,   3.+0.j,   4.+0.j,   5.+0.j, ... ok
test_format.test_roundtrip(array([[  0.+0.j,   1.+0.j,   2.+0.j,   3.+0.j,   4.+0.j], ... ok
test_format.test_roundtrip(array([[  0.+0.j,   5.+0.j,  10.+0.j], ... ok
test_format.test_roundtrip(array([[ 10.+0.j,  12.+0.j,  14.+0.j], ... ok
test_format.test_roundtrip(array([], dtype=object), array([], dtype=object)) ... ok
test_format.test_roundtrip(array(10, dtype=object), array(10, dtype=object)) ... ok
test_format.test_roundtrip(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], dtype=object), array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], dtype=object)) ... ok
test_format.test_roundtrip(array([[0, 1, 2, 3, 4], ... ok
test_format.test_roundtrip(array([[0, 5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([], dtype=object), array([], dtype=object)) ... ok
test_format.test_roundtrip(array(10, dtype=object), array(10, dtype=object)) ... ok
test_format.test_roundtrip(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], dtype=object), array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], dtype=object)) ... ok
test_format.test_roundtrip(array([[0, 1, 2, 3, 4], ... ok
test_format.test_roundtrip(array([[0, 5, 10], ... ok
test_format.test_roundtrip(array([[10, 12, 14], ... ok
test_format.test_roundtrip(array([([3, 2], [[6.0, 4.0], [6.0, 4.0]], 8), ... ok
test_format.test_roundtrip(array([ ([3, 2], (6j, 6.0, ('nn', [6j, 4j], [6.0, 4.0], [1L, 2L]), 'NN', True), 'cc', (u'NN', 6j), [[6.0, 4.0], [6.0, 4.0]], 8), ... ok
test_format.test_roundtrip(array([([3, 2], [[6.0, 4.0], [6.0, 4.0]], 8), ... ok
test_format.test_roundtrip(array([ ([3, 2], (6j, 6.0, ('nn', [6j, 4j], [6.0, 4.0], [1L, 2L]), 'NN', True), 'cc', (u'NN', 6j), [[6.0, 4.0], [6.0, 4.0]], 8), ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (), }              \n\n", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (), }              \n\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (15,), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (15,), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x0c\x0e\x05\x07\t\x00\x02\x04", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x0c\x0e\x05\x07\t\x00\x02\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (), }              \n\n", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (), }              \n\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (15,), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (15,), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x0c\x0e\x05\x07\t\x00\x02\x04", "\x93NUMPY\x01\x00F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x0c\x0e\x05\x07\t\x00\x02\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (), }              \n\n", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (), }              \n\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (15,), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (15,), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x0c\x0e\x05\x07\t\x00\x02\x04", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x0c\x0e\x05\x07\t\x00\x02\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (), }              \n\n", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (), }              \n\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (15,), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (15,), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x0c\x0e\x05\x07\t\x00\x02\x04", "\x93NUMPY\x01\x00F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x0c\x0e\x05\x07\t\x00\x02\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (), }              \n\n\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (), }              \n\n\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x0c\x00\x0e\x00\x05\x00\x07\x00\t\x00\x00\x00\x02\x00\x04\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x0c\x00\x0e\x00\x05\x00\x07\x00\t\x00\x00\x00\x02\x00\x04\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (), }              \n\x00\n", "\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (), }              \n\x00\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\n\x00\x0c\x00\x0e\x00\x05\x00\x07\x00\t\x00\x00\x00\x02\x00\x04", "\x93NUMPY\x01\x00F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\n\x00\x0c\x00\x0e\x00\x05\x00\x07\x00\t\x00\x00\x00\x02\x00\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (), }              \n\n\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (), }              \n\n\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x0c\x00\x0e\x00\x05\x00\x07\x00\t\x00\x00\x00\x02\x00\x04\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x0c\x00\x0e\x00\x05\x00\x07\x00\t\x00\x00\x00\x02\x00\x04\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (), }              \n\x00\n", "\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (), }              \n\x00\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\t\x00\n\x00\x0b\x00\x0c\x00\r\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\n\x00\x0c\x00\x0e\x00\x05\x00\x07\x00\t\x00\x00\x00\x02\x00\x04", "\x93NUMPY\x01\x00F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\n\x00\x0c\x00\x0e\x00\x05\x00\x07\x00\t\x00\x00\x00\x02\x00\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (), }              \n\n\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (), }              \n\n\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00\x05\x00\x00\x00\x07\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00\x05\x00\x00\x00\x07\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\n", "\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00\x00\n\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00\x05\x00\x00\x00\x07\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04", "\x93NUMPY\x01\x00F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00\x00\n\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00\x05\x00\x00\x00\x07\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (), }              \n\n\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (), }              \n\n\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00\x05\x00\x00\x00\x07\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00\x05\x00\x00\x00\x07\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\n", "\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00\x00\n\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00\x05\x00\x00\x00\x07\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04", "\x93NUMPY\x01\x00F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00\x00\n\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00\x05\x00\x00\x00\x07\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (), }              \n\n\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (), }              \n\n\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\x00\x00\x00\x00\n", "\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\x00\x00\x00\x00\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04", "\x93NUMPY\x01\x00F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (), }              \n\n\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (), }              \n\n\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (3, 3), }          \n\n\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\x00\x00\x00\x00\n", "\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\x00\x00\x00\x00\n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e", "\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0e") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04", "\x93NUMPY\x01\x00F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (), }              \n\x00\x00 A", "\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (), }              \n\x00\x00 A") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A", "\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A", "\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A", "\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00 A\x00\x00@A\x00\x00`A\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x10A\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x80@", "\x93NUMPY\x01\x00F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00 A\x00\x00@A\x00\x00`A\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x10A\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x80@") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (), }              \nA \x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (), }              \nA \x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00?\x80\x00\x00@\x00\x00\x00@@\x00\x00@\x80\x00\x00@\xa0\x00\x00@\xc0\x00\x00@\xe0\x00\x00A\x00\x00\x00A\x10\x00\x00A \x00\x00A0\x00\x00A@\x00\x00AP\x00\x00A`\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00?\x80\x00\x00@\x00\x00\x00@@\x00\x00@\x80\x00\x00@\xa0\x00\x00@\xc0\x00\x00@\xe0\x00\x00A\x00\x00\x00A\x10\x00\x00A \x00\x00A0\x00\x00A@\x00\x00AP\x00\x00A`\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00?\x80\x00\x00@\x00\x00\x00@@\x00\x00@\x80\x00\x00@\xa0\x00\x00@\xc0\x00\x00@\xe0\x00\x00A\x00\x00\x00A\x10\x00\x00A \x00\x00A0\x00\x00A@\x00\x00AP\x00\x00A`\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00?\x80\x00\x00@\x00\x00\x00@@\x00\x00@\x80\x00\x00@\xa0\x00\x00@\xc0\x00\x00@\xe0\x00\x00A\x00\x00\x00A\x10\x00\x00A \x00\x00A0\x00\x00A@\x00\x00AP\x00\x00A`\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00?\x80\x00\x00@\x00\x00\x00@@\x00\x00@\x80\x00\x00@\xa0\x00\x00@\xc0\x00\x00@\xe0\x00\x00A\x00\x00\x00A\x10\x00\x00A \x00\x00A0\x00\x00A@\x00\x00AP\x00\x00A`\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00?\x80\x00\x00@\x00\x00\x00@@\x00\x00@\x80\x00\x00@\xa0\x00\x00@\xc0\x00\x00@\xe0\x00\x00A\x00\x00\x00A\x10\x00\x00A \x00\x00A0\x00\x00A@\x00\x00AP\x00\x00A`\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (3, 3), }          \nA \x00\x00A@\x00\x00A`\x00\x00@\xa0\x00\x00@\xe0\x00\x00A\x10\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x80\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (3, 3), }          \nA \x00\x00A@\x00\x00A`\x00\x00@\xa0\x00\x00@\xe0\x00\x00A\x10\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x80\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\x00\x00\x00$@", "\x93NUMPY\x01\x00F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (), }              \n\x00\x00\x00\x00\x00\x00$@") ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'<f8\', \'fortran_order\': False, \'shape\': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00,@', '\x93NUMPY\x01\x00F\x00{\'descr\': \'<f8\', \'fortran_order\': False, \'shape\': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00,@') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'<f8\', \'fortran_order\': False, \'shape\': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00,@', '\x93NUMPY\x01\x00F\x00{\'descr\': \'<f8\', \'fortran_order\': False, \'shape\': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00,@') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'<f8\', \'fortran_order\': True, \'shape\': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00,@', '\x93NUMPY\x01\x00F\x00{\'descr\': \'<f8\', \'fortran_order\': True, \'shape\': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00,@') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'<f8\', \'fortran_order\': False, \'shape\': (3, 3), }          \n\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x10@', '\x93NUMPY\x01\x00F\x00{\'descr\': \'<f8\', \'fortran_order\': False, \'shape\': (3, 3), }          \n\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x10@') ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (), }              \n@$\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (), }              \n@$\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'>f8\', \'fortran_order\': False, \'shape\': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'>f8\', \'fortran_order\': False, \'shape\': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'>f8\', \'fortran_order\': False, \'shape\': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'>f8\', \'fortran_order\': False, \'shape\': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'>f8\', \'fortran_order\': True, \'shape\': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'>f8\', \'fortran_order\': True, \'shape\': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'>f8\', \'fortran_order\': False, \'shape\': (3, 3), }          \n@$\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'>f8\', \'fortran_order\': False, \'shape\': (3, 3), }          \n@$\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (), }              \n\x00\x00 A\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (), }              \n\x00\x00 A\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x10A\x00\x00\x00\x00\x00\x00 A\x00\x00\x00\x00\x00\x000A\x00\x00\x00\x00\x00\x00@A\x00\x00\x00\x00\x00\x00PA\x00\x00\x00\x00\x00\x00`A\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x10A\x00\x00\x00\x00\x00\x00 A\x00\x00\x00\x00\x00\x000A\x00\x00\x00\x00\x00\x00@A\x00\x00\x00\x00\x00\x00PA\x00\x00\x00\x00\x00\x00`A\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x10A\x00\x00\x00\x00\x00\x00 A\x00\x00\x00\x00\x00\x000A\x00\x00\x00\x00\x00\x00@A\x00\x00\x00\x00\x00\x00PA\x00\x00\x00\x00\x00\x00`A\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x10A\x00\x00\x00\x00\x00\x00 A\x00\x00\x00\x00\x00\x000A\x00\x00\x00\x00\x00\x00@A\x00\x00\x00\x00\x00\x00PA\x00\x00\x00\x00\x00\x00`A\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x10A\x00\x00\x00\x00\x00\x00 A\x00\x00\x00\x00\x00\x000A\x00\x00\x00\x00\x00\x00@A\x00\x00\x00\x00\x00\x00PA\x00\x00\x00\x00\x00\x00`A\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x10A\x00\x00\x00\x00\x00\x00 A\x00\x00\x00\x00\x00\x000A\x00\x00\x00\x00\x00\x00@A\x00\x00\x00\x00\x00\x00PA\x00\x00\x00\x00\x00\x00`A\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00 A\x00\x00\x00\x00\x00\x00@A\x00\x00\x00\x00\x00\x00`A\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x10A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (3, 3), }          \n\x00\x00 A\x00\x00\x00\x00\x00\x00@A\x00\x00\x00\x00\x00\x00`A\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x10A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (0,), }            \n", "\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (0,), }            \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (), }              \nA \x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (), }              \nA \x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00?\x80\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00@\x80\x00\x00\x00\x00\x00\x00@\xa0\x00\x00\x00\x00\x00\x00@\xc0\x00\x00\x00\x00\x00\x00@\xe0\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00A\x10\x00\x00\x00\x00\x00\x00A \x00\x00\x00\x00\x00\x00A0\x00\x00\x00\x00\x00\x00A@\x00\x00\x00\x00\x00\x00AP\x00\x00\x00\x00\x00\x00A`\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (15,), }           \n\x00\x00\x00\x00\x00\x00\x00\x00?\x80\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00@\x80\x00\x00\x00\x00\x00\x00@\xa0\x00\x00\x00\x00\x00\x00@\xc0\x00\x00\x00\x00\x00\x00@\xe0\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00A\x10\x00\x00\x00\x00\x00\x00A \x00\x00\x00\x00\x00\x00A0\x00\x00\x00\x00\x00\x00A@\x00\x00\x00\x00\x00\x00AP\x00\x00\x00\x00\x00\x00A`\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00?\x80\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00@\x80\x00\x00\x00\x00\x00\x00@\xa0\x00\x00\x00\x00\x00\x00@\xc0\x00\x00\x00\x00\x00\x00@\xe0\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00A\x10\x00\x00\x00\x00\x00\x00A \x00\x00\x00\x00\x00\x00A0\x00\x00\x00\x00\x00\x00A@\x00\x00\x00\x00\x00\x00AP\x00\x00\x00\x00\x00\x00A`\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (3, 5), }          \n\x00\x00\x00\x00\x00\x00\x00\x00?\x80\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00@\x80\x00\x00\x00\x00\x00\x00@\xa0\x00\x00\x00\x00\x00\x00@\xc0\x00\x00\x00\x00\x00\x00@\xe0\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00A\x10\x00\x00\x00\x00\x00\x00A \x00\x00\x00\x00\x00\x00A0\x00\x00\x00\x00\x00\x00A@\x00\x00\x00\x00\x00\x00AP\x00\x00\x00\x00\x00\x00A`\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00?\x80\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00@\x80\x00\x00\x00\x00\x00\x00@\xa0\x00\x00\x00\x00\x00\x00@\xc0\x00\x00\x00\x00\x00\x00@\xe0\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00A\x10\x00\x00\x00\x00\x00\x00A \x00\x00\x00\x00\x00\x00A0\x00\x00\x00\x00\x00\x00A@\x00\x00\x00\x00\x00\x00AP\x00\x00\x00\x00\x00\x00A`\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': True, 'shape': (5, 3), }           \n\x00\x00\x00\x00\x00\x00\x00\x00?\x80\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00@\x80\x00\x00\x00\x00\x00\x00@\xa0\x00\x00\x00\x00\x00\x00@\xc0\x00\x00\x00\x00\x00\x00@\xe0\x00\x00\x00\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00A\x10\x00\x00\x00\x00\x00\x00A \x00\x00\x00\x00\x00\x00A0\x00\x00\x00\x00\x00\x00A@\x00\x00\x00\x00\x00\x00AP\x00\x00\x00\x00\x00\x00A`\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (3, 3), }          \nA \x00\x00\x00\x00\x00\x00A@\x00\x00\x00\x00\x00\x00A`\x00\x00\x00\x00\x00\x00@\xa0\x00\x00\x00\x00\x00\x00@\xe0\x00\x00\x00\x00\x00\x00A\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x80\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (3, 3), }          \nA \x00\x00\x00\x00\x00\x00A@\x00\x00\x00\x00\x00\x00A`\x00\x00\x00\x00\x00\x00@\xa0\x00\x00\x00\x00\x00\x00@\xe0\x00\x00\x00\x00\x00\x00A\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00@\x80\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (0,), }           \n", "\x93NUMPY\x01\x00F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (0,), }           \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (), }             \n\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (), }             \n\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'<c16\', \'fortran_order\': False, \'shape\': (15,), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'<c16\', \'fortran_order\': False, \'shape\': (15,), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'<c16\', \'fortran_order\': False, \'shape\': (3, 5), }         \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'<c16\', \'fortran_order\': False, \'shape\': (3, 5), }         \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'<c16\', \'fortran_order\': True, \'shape\': (5, 3), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'<c16\', \'fortran_order\': True, \'shape\': (5, 3), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'<c16\', \'fortran_order\': False, \'shape\': (3, 3), }         \n\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'<c16\', \'fortran_order\': False, \'shape\': (3, 3), }         \n\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (0,), }           \n", "\x93NUMPY\x01\x00F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (0,), }           \n") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (), }             \n@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", "\x93NUMPY\x01\x00F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (), }             \n@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00") ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'>c16\', \'fortran_order\': False, \'shape\': (15,), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'>c16\', \'fortran_order\': False, \'shape\': (15,), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'>c16\', \'fortran_order\': False, \'shape\': (3, 5), }         \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'>c16\', \'fortran_order\': False, \'shape\': (3, 5), }         \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'>c16\', \'fortran_order\': True, \'shape\': (5, 3), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'>c16\', \'fortran_order\': True, \'shape\': (5, 3), }          \n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@ \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@*\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip('\x93NUMPY\x01\x00F\x00{\'descr\': \'>c16\', \'fortran_order\': False, \'shape\': (3, 3), }         \n@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', '\x93NUMPY\x01\x00F\x00{\'descr\': \'>c16\', \'fortran_order\': False, \'shape\': (3, 3), }         \n@$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00') ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00v\x00{'descr': [('x', '<i4', (2,)), ('y', '<f8', (2, 2)), ('z', '|u1')], 'fortran_order': False, 'shape': (2,), }         \n\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x08\x04\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\t", "\x93NUMPY\x01\x00v\x00{'descr': [('x', '<i4', (2,)), ('y', '<f8', (2, 2)), ('z', '|u1')], 'fortran_order': False, 'shape': (2,), }         \n\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x08\x04\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\t") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00f\x01{'descr': [('x', '<i4', (2,)), ('Info', [('value', '<c16'), ('y2', '<f8'), ('Info2', [('name', '|S2'), ('value', '<c16', (2,)), ('y3', '<f8', (2,)), ('z3', '<u4', (2,))]), ('name', '|S2'), ('z2', '|b1')]), ('color', '|S2'), ('info', [('Name', '<U8'), ('Value', '<c16')]), ('y', '<f8', (2, 2)), ('z', '|u1')], 'fortran_order': False, 'shape': (2,), }        \n\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x18@nn\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x01\x00\x00\x00\x02\x00\x00\x00NN\x01ccN\x00\x00\x00N\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x08\x04\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x1c@oo\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\x02\x00\x00\x00\x01\x00\x00\x00OO\x00ddO\x00\x00\x00O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\t", "\x93NUMPY\x01\x00f\x01{'descr': [('x', '<i4', (2,)), ('Info', [('value', '<c16'), ('y2', '<f8'), ('Info2', [('name', '|S2'), ('value', '<c16', (2,)), ('y3', '<f8', (2,)), ('z3', '<u4', (2,))]), ('name', '|S2'), ('z2', '|b1')]), ('color', '|S2'), ('info', [('Name', '<U8'), ('Value', '<c16')]), ('y', '<f8', (2, 2)), ('z', '|u1')], 'fortran_order': False, 'shape': (2,), }        \n\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x18@nn\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x01\x00\x00\x00\x02\x00\x00\x00NN\x01ccN\x00\x00\x00N\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x10@\x08\x04\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x1c@oo\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\x02\x00\x00\x00\x01\x00\x00\x00OO\x00ddO\x00\x00\x00O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00\x14@\t") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00v\x00{'descr': [('x', '>i4', (2,)), ('y', '>f8', (2, 2)), ('z', '|u1')], 'fortran_order': False, 'shape': (2,), }         \n\x00\x00\x00\x03\x00\x00\x00\x02@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\x03@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\t", "\x93NUMPY\x01\x00v\x00{'descr': [('x', '>i4', (2,)), ('y', '>f8', (2, 2)), ('z', '|u1')], 'fortran_order': False, 'shape': (2,), }         \n\x00\x00\x00\x03\x00\x00\x00\x02@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\x03@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\t") ... ok
test_format.test_memmap_roundtrip("\x93NUMPY\x01\x00f\x01{'descr': [('x', '>i4', (2,)), ('Info', [('value', '>c16'), ('y2', '>f8'), ('Info2', [('name', '|S2'), ('value', '>c16', (2,)), ('y3', '>f8', (2,)), ('z3', '>u4', (2,))]), ('name', '|S2'), ('z2', '|b1')]), ('color', '|S2'), ('info', [('Name', '>U8'), ('Value', '>c16')]), ('y', '>f8', (2, 2)), ('z', '|u1')], 'fortran_order': False, 'shape': (2,), }        \n\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00nn\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02NN\x01cc\x00\x00\x00N\x00\x00\x00N\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00oo\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01OO\x00dd\x00\x00\x00O\x00\x00\x00O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\t", "\x93NUMPY\x01\x00f\x01{'descr': [('x', '>i4', (2,)), ('Info', [('value', '>c16'), ('y2', '>f8'), ('Info2', [('name', '|S2'), ('value', '>c16', (2,)), ('y3', '>f8', (2,)), ('z3', '>u4', (2,))]), ('name', '|S2'), ('z2', '|b1')]), ('color', '|S2'), ('info', [('Name', '>U8'), ('Value', '>c16')]), ('y', '>f8', (2, 2)), ('z', '|u1')], 'fortran_order': False, 'shape': (2,), }        \n\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00nn\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02NN\x01cc\x00\x00\x00N\x00\x00\x00N\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00@\x18\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00oo\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01OO\x00dd\x00\x00\x00O\x00\x00\x00O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00@\x1c\x00\x00\x00\x00\x00\x00@\x14\x00\x00\x00\x00\x00\x00\t") ... ok
test_format.test_write_version_1_0 ... ok
test_format.test_read_magic_bad_magic(<cStringIO.StringI object at 0x7d8c20>,) ... ok
test_format.test_read_magic_bad_magic(<cStringIO.StringI object at 0x57d3f8>,) ... ok
test_format.test_read_magic_bad_magic(<cStringIO.StringI object at 0x57dbd8>,) ... ok
test_format.test_read_magic_bad_magic(<cStringIO.StringI object at 0x57d3f8>,) ... ok
test_format.test_read_magic_bad_magic(<cStringIO.StringI object at 0x57dbd8>,) ... ok
test_format.test_read_magic_bad_magic(<cStringIO.StringI object at 0x57d3f8>,) ... ok
test_format.test_read_magic_bad_magic(<cStringIO.StringI object at 0x57dbd8>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57dbd8>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57d3f8>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57dc68>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57d3f8>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57dc68>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57d3f8>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57dc68>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57d3f8>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57dc68>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57d3f8>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57dc68>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57d3f8>,) ... ok
test_format.test_read_version_1_0_bad_magic(<cStringIO.StringI object at 0x57dc68>,) ... ok
test_format.test_bad_magic_args ... ok
test_format.test_large_header ... ok
test_format.test_bad_header ... ok
test_basic (test_function_base.TestAll) ... ok
test_nd (test_function_base.TestAll) ... ok
test_basic (test_function_base.TestAmax) ... ok
test_basic (test_function_base.TestAmin) ... ok
test_basic (test_function_base.TestAngle) ... ok
test_basic (test_function_base.TestAny) ... ok
test_nd (test_function_base.TestAny) ... ok
test_basic (test_function_base.TestAverage) ... ok
test_returned (test_function_base.TestAverage) ... ok
test_weights (test_function_base.TestAverage) ... ok
test_simple (test_function_base.TestBincount) ... ok
test_simple2 (test_function_base.TestBincount) ... ok
test_simple_weight (test_function_base.TestBincount) ... ok
test_simple_weight2 (test_function_base.TestBincount) ... ok
test_simple (test_function_base.TestCheckFinite) ... ok
test_ddof (test_function_base.TestCorrCoef) ... ok
test_simple (test_function_base.TestCorrCoef) ... ok
test_basic (test_function_base.TestCumprod) ... ok
test_basic (test_function_base.TestCumsum) ... ok
test_basic (test_function_base.TestDiff) ... ok
test_nd (test_function_base.TestDiff) ... ok
test_forward (test_function_base.TestDigitize) ... ok
test_random (test_function_base.TestDigitize) ... ok
test_reverse (test_function_base.TestDigitize) ... ok
test_basic (test_function_base.TestExtins) ... ok
test_both (test_function_base.TestExtins) ... ok
test_place (test_function_base.TestExtins) ... ok
test_bartlett (test_function_base.TestFilterwindows) ... ok
test_blackman (test_function_base.TestFilterwindows) ... ok
test_hamming (test_function_base.TestFilterwindows) ... ok
test_hanning (test_function_base.TestFilterwindows) ... ok
test_badargs (test_function_base.TestGradient) ... ok
test_basic (test_function_base.TestGradient) ... ok
test_masked (test_function_base.TestGradient) ... ok
test_normed (test_function_base.TestHistogram) ... ok
test_one_bin (test_function_base.TestHistogram) ... ok
test_outliers (test_function_base.TestHistogram) ... ok
test_simple (test_function_base.TestHistogram) ... ok
test_type (test_function_base.TestHistogram) ... ok
test_weights (test_function_base.TestHistogram) ... ok
test_identical_samples (test_function_base.TestHistogramdd) ... ok
test_shape_3d (test_function_base.TestHistogramdd) ... ok
test_shape_4d (test_function_base.TestHistogramdd) ... ok
test_simple (test_function_base.TestHistogramdd) ... ok
test_weights (test_function_base.TestHistogramdd) ... ok
test_basic (test_function_base.TestInsert) ... ok
test_basic (test_function_base.TestInterp) ... ok
test_exceptions (test_function_base.TestInterp) ... ok
test_right_left_behavior (test_function_base.TestInterp) ... ok
test_scalar_interpolation_point (test_function_base.TestInterp) ... ok
test_zero_dimensional_interpolation_point (test_function_base.TestInterp) ... ok
test_int_beta (test_function_base.TestKaiser) ... ok
test_simple (test_function_base.TestKaiser) ... ok
test_simple (test_function_base.TestMeshgrid) ... ok
test_simple (test_function_base.TestMsort) ... ok
test_nanargmin (test_function_base.TestNaNFuncts) ... ok
test_nanmax (test_function_base.TestNaNFuncts) ... ok
test_nanmin (test_function_base.TestNaNFuncts) ... ok
test_nanmin_allnan_on_axis (test_function_base.TestNaNFuncts) ... ok
test_nanmin_masked (test_function_base.TestNaNFuncts) ... ok
test_nansum (test_function_base.TestNaNFuncts) ... ok
test_nanargmax (test_function_base.TestNanFunctsIntTypes) ... ok
test_nanargmin (test_function_base.TestNanFunctsIntTypes) ... ok
test_nanmax (test_function_base.TestNanFunctsIntTypes) ... ok
test_nanmin (test_function_base.TestNanFunctsIntTypes) ... ok
test_0d (test_function_base.TestPiecewise) ... ok
test_default (test_function_base.TestPiecewise) ... ok
test_simple (test_function_base.TestPiecewise) ... ok
test_basic (test_function_base.TestProd) ... ok
test_basic (test_function_base.TestPtp) ... ok
test_basic (test_function_base.TestSelect) ... ok
test_array_like (test_function_base.TestSinc) ... ok
test_simple (test_function_base.TestSinc) ... ok
test_masked (test_function_base.TestTrapz) ... ok
test_matrix (test_function_base.TestTrapz) ... ok
test_ndim (test_function_base.TestTrapz) ... ok
test_simple (test_function_base.TestTrapz) ... ok
test_basic (test_function_base.TestTrimZeros) ... ok
test_leading_skip (test_function_base.TestTrimZeros) ... ok
test_trailing_skip (test_function_base.TestTrimZeros) ... ok
test_simple (test_function_base.TestUnique) ... ok
test_simple (test_function_base.TestUnwrap) ... ok
test_keywords (test_function_base.TestVectorize) ... ok
test_keywords_no_func_code (test_function_base.TestVectorize) ... ok
test_large (test_function_base.TestVectorize) ... ok
test_scalar (test_function_base.TestVectorize) ... ok
test_simple (test_function_base.TestVectorize) ... ok
test_ufunc (test_function_base.TestVectorize) ... ok
test_simple (test_function_base.Test_i0) ... ok
test_function_base.test_percentile_list ... ok
test_function_base.test_percentile_out ... ok
test_1d (test_index_tricks.TestConcatenator) ... ok
test_2d (test_index_tricks.TestConcatenator) ... ok
test_mixed_type (test_index_tricks.TestConcatenator) ... ok
test_more_mixed_type (test_index_tricks.TestConcatenator) ... ok
test_basic (test_index_tricks.TestGrid) ... ok
test_linspace_equivalence (test_index_tricks.TestGrid) ... ok
test_nd (test_index_tricks.TestGrid) ... ok
test_regression_1 (test_index_tricks.TestIndexExpression) ... ok
test_simple_1 (test_index_tricks.TestIndexExpression) ... ok
test_basic (test_index_tricks.TestNdenumerate) ... ok
test_basic (test_index_tricks.TestUnravelIndex) ... ok
test_index_tricks.test_fill_diagonal(array([[5, 0, 0], ... ok
test_index_tricks.test_fill_diagonal((array([0, 1, 2]), array([0, 1, 2]), array([0, 1, 2]), array([0, 1, 2])), (array([0, 1, 2]), array([0, 1, 2]), array([0, 1, 2]), array([0, 1, 2]))) ... ok
test_index_tricks.test_diag_indices(array([[100,   2,   3,   4], ... ok
test_index_tricks.test_diag_indices(array([[[1, 0], ... ok
test_index_tricks.test_diag_indices_from ... ok
Test squeezing to 1D ... ok
Test outputing a standard ndarray ... ok
Test the automatic definition of the output dtype ... ok
Tests whether the output dtype can be uniformized ... ok
Tests names and usecols ... ok
Test autostrip ... ok
Check that names can be retrieved even if the line is commented out. ... ok
Test the stripping of comments ... ok
Test the conversion to datetime. ... ok
Test the combination user-defined converters and usecol ... ok
Tests names and usecols ... ok
Test default format ... ok
test_dtype_with_converters (test_io.TestFromTxt) ... ok
Test using an explicit dtype with an object ... ok
Test easy structured dtype ... ok
Test that an empty file raises the proper exception ... ok
Check that a nested dtype isn't MIA ... ok
Check that a nested dtype isn't MIA ... ok
Test missing values ... ok
Test fix-width w/ names ... ok
Test retrieving a header ... ok
Test w/ incomplete names ... ok
Test inconsistent dtype ... ok
test_invalid_converter (test_io.TestFromTxt) ... ok
Test invalid raise ... ok
Test invalid_raise with usecols ... ok
test_missing (test_io.TestFromTxt) ... ok
Test w/ a delimiter tab ... ok
Make sure that names are properly completed ... ok
Test overwriting the names of the dtype ... ok
test_recfromcsv (test_io.TestFromTxt) ... ok
test_recfromtxt (test_io.TestFromTxt) ... ok
Test w/ explicit dtype ... ok
Test the 'replace_space' option ... ok
test_shaped_dtype (test_io.TestFromTxt) ... ok
Test single dtype w explicit names ... ok
Test single dtype w implicit names ... ok
Test single dtype w/o names ... ok
test_skip_footer (test_io.TestFromTxt) ... ok
Test row skipping ... ok
Test space delimiter ... ok
Test whether unused converters are forgotten ... ok
Test the selection of columns ... ok
Test giving usecols with a comma-separated string ... ok
Test usecols with an integer ... ok
Test usecols with named columns ... ok
Test usecols with an explicit structured dtype ... ok
Test with missing and filling values ... ok
test_user_missing_values (test_io.TestFromTxt) ... ok
Test user_converters w/ explicit (standard) dtype ... ok
Test masked column ... ok
Test masked column ... ok
test_withmissing (test_io.TestFromTxt) ... ok
test_withmissing_float (test_io.TestFromTxt) ... ok
test_1D (test_io.TestLoadTxt) ... ok
test_array (test_io.TestLoadTxt) ... ok
test_comments (test_io.TestLoadTxt) ... ok
test_converters_with_usecols (test_io.TestLoadTxt) ... ok
Test using an explicit dtype with an object ... ok
test_empty_file (test_io.TestLoadTxt) ... ok
test_fancy_dtype (test_io.TestLoadTxt) ... ok
test_missing (test_io.TestLoadTxt) ... ok
test_record (test_io.TestLoadTxt) ... ok
test_shaped_dtype (test_io.TestLoadTxt) ... ok
test_skiprows (test_io.TestLoadTxt) ... ok
test_universal_newline (test_io.TestLoadTxt) ... ok
test_unused_converter (test_io.TestLoadTxt) ... ok
test_usecols (test_io.TestLoadTxt) ... ok
test_1D (test_io.TestSaveLoad) ... ok
test_array (test_io.TestSaveLoad) ... ok
test_mmap (test_io.TestSaveLoad) ... ok
test_record (test_io.TestSaveLoad) ... ok
test_1D (test_io.TestSaveTxt) ... ok
test_array (test_io.TestSaveTxt) ... ok
test_delimiter (test_io.TestSaveTxt) ... ok
test_file_roundtrip (test_io.TestSaveTxt) ... ok
test_format (test_io.TestSaveTxt) ... ok
test_record (test_io.TestSaveTxt) ... ok
test_1D (test_io.TestSavezLoad) ... ok
test_array (test_io.TestSavezLoad) ... ok
test_mmap (test_io.TestSavezLoad) ... ok
test_multiple_arrays (test_io.TestSavezLoad) ... ok
test_named_arrays (test_io.TestSavezLoad) ... ok
test_record (test_io.TestSavezLoad) ... ok
test_savez_filename_clashes (test_io.TestSavezLoad) ... ok
test_record (test_io.Testfromregex) ... ok
test_record_2 (test_io.Testfromregex) ... ok
test_record_3 (test_io.Testfromregex) ... ok
test_io.test_gzip_load ... ok
test_io.test_gzip_loadtxt ... ok
test_io.test_gzip_loadtxt_from_string ... ok
test_io.test_npzfile_dict ... ok
test_complex (test_polynomial.TestDocs) ... ok
test_doctests (test_polynomial.TestDocs) ... ok
test_integ_coeffs (test_polynomial.TestDocs) ... ok
test_objects (test_polynomial.TestDocs) ... ok
test_polyfit (test_polynomial.TestDocs) ... ok
test_roots (test_polynomial.TestDocs) ... ok
test_str_leading_zeros (test_polynomial.TestDocs) ... ok
test_zero_dims (test_polynomial.TestDocs) ... ok
Test simple case ... ok
Test append_fields on flexible type arrays ... ok
Test append_fields on nested fields ... ok
Test simple case ... ok
Basic test of join_by ... ok
Test standard & flexible ... ok
Test flatten standard & nested ... ok
test_singlerecord (test_recfunctions.TestMergeArrays) ... ok
Test merge_arrays on a single array. ... ok
Test merge_arrays on a single array w & w/o flattening ... ok
Test standard & standard ... ok
Test merge_arrays w/ a shorter flexndarray. ... ok
Test single field ... ok
Test merge_arrays masked arrays ... ok
Test drop_fields ... ok
Test find_duplicates ... ok
Test the ignoremask option of find_duplicates ... ok
Test get_fieldstructure ... ok
Tests get_names ... ok
Test get_names_flat ... ok
Tests rename fields ... ok
Test zip_descr ... ok
Test recursive_fill_fields on masked flexible-array ... ok
Test recursive_fill_fields on flexible-array ... ok
Tests autoconversion ... ok
Test using titles in the field names ... ok
Test defaults: no exception raised if keys of defaults are not fields. ... ok
Test combination of arrays w/ matching field names ... ok
Test stack_arrays on single arrays ... ok
Test combination of arrays w/ & w/o named fields ... ok
Tests combinations of arrays w/o named fields ... ok
Test for changeset r5065 ... ok
Ticket #1387: empty array as input for bincount. ... ok
Ticket #91 ... ok
Ticket 928. ... ok
As a sanity check, just test that get_include and ... ok
test_large_fancy_indexing (test_regression.TestRegression) ... ok
Ticket #95 ... ok
Ticket #572 ... ok
Ticket #448 ... ok
Ticket #469 ... ok
Ticket #325 ... ok
Ticket #339 ... ok
Ticket 1140 ... ok
Ticket #28 ... ok
Ticket #396 ... ok
Ticket #553 ... ok
Ticket #554 ... ok
Ticket #1249 ... ok
Make polydiv work for complex types ... ok
Ticket #628 ... ok
Ticket #944 ... ok
Ticket #378 ... ok
Ticket #205 ... ok
test_void_coercion (test_regression.TestRegression) ... ok
ticket #1243 ... ok
test_3d (test_shape_base.TestApplyAlongAxis) ... ok
test_simple (test_shape_base.TestApplyAlongAxis) ... ok
test_simple101 (test_shape_base.TestApplyAlongAxis) ... ok
test_simple (test_shape_base.TestApplyOverAxes) ... ok
test_index_split_high_bound (test_shape_base.TestArraySplit) ... ok
test_index_split_low_bound (test_shape_base.TestArraySplit) ... ok
test_index_split_simple (test_shape_base.TestArraySplit) ... ok
test_integer_0_split (test_shape_base.TestArraySplit) ... ok
test_integer_split (test_shape_base.TestArraySplit) ... ok
test_integer_split_2D_cols (test_shape_base.TestArraySplit) ... ok
This will fail if we change default axis ... ok
test_integer_split_2D_rows (test_shape_base.TestArraySplit) ... ok
test_2D_array (test_shape_base.TestDsplit) ... ok
test_3D_array (test_shape_base.TestDsplit) ... ok
test_0D_array (test_shape_base.TestDstack) ... ok
test_1D_array (test_shape_base.TestDstack) ... ok
test_2D_array (test_shape_base.TestDstack) ... ok
test_2D_array2 (test_shape_base.TestDstack) ... ok
test_0D_array (test_shape_base.TestHsplit) ... ok
test_1D_array (test_shape_base.TestHsplit) ... ok
test_2D_array (test_shape_base.TestHsplit) ... ok
test_return_type (test_shape_base.TestKron) ... ok
test_equal_split (test_shape_base.TestSplit) ... ok
test_unequal_split (test_shape_base.TestSplit) ... ok
test_basic (test_shape_base.TestSqueeze) ... ok
test_basic (test_shape_base.TestTile) ... ok
test_empty (test_shape_base.TestTile) ... ok
test_kroncompare (test_shape_base.TestTile) ... ok
test_1D_array (test_shape_base.TestVsplit) ... ok
test_2D_array (test_shape_base.TestVsplit) ... ok
test_stride_tricks.test_same ... ok
test_stride_tricks.test_one_off ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that the final shape is just the input shape. ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of the same length but some have ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that two different input shapes (of different lengths) broadcast ... ok
Check that a ValueError is raised for incompatible shapes. ... ok
Check that a ValueError is raised for incompatible shapes. ... ok
Check that a ValueError is raised for incompatible shapes. ... ok
Check that a ValueError is raised for incompatible shapes. ... ok
Check that a ValueError is raised for incompatible shapes. ... ok
Check that a ValueError is raised for incompatible shapes. ... ok
Check that a ValueError is raised for incompatible shapes. ... ok
Check that a ValueError is raised for incompatible shapes. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
Check that the data layout is the same as if a ufunc did the operation. ... ok
test_diag_bounds (test_twodim_base.TestDiag) ... ok
test_failure (test_twodim_base.TestDiag) ... ok
test_fortran_order (test_twodim_base.TestDiag) ... ok
test_matrix (test_twodim_base.TestDiag) ... ok
test_vector (test_twodim_base.TestDiag) ... ok
test_2d (test_twodim_base.TestEye) ... ok
test_basic (test_twodim_base.TestEye) ... ok
test_bool (test_twodim_base.TestEye) ... ok
test_diag (test_twodim_base.TestEye) ... ok
test_diag2d (test_twodim_base.TestEye) ... ok
test_eye_bounds (test_twodim_base.TestEye) ... ok
test_strings (test_twodim_base.TestEye) ... ok
test_basic (test_twodim_base.TestFliplr) ... ok
test_basic (test_twodim_base.TestFlipud) ... ok
test_all_outliers (test_twodim_base.TestHistogram2d) ... ok
test_asym (test_twodim_base.TestHistogram2d) ... ok
test_norm (test_twodim_base.TestHistogram2d) ... ok
test_simple (test_twodim_base.TestHistogram2d) ... ok
test_mask_indices (test_twodim_base.TestMaskIndices) ... ok
test_axes (test_twodim_base.TestRot90) ... ok
test_basic (test_twodim_base.TestRot90) ... ok
test_dtype (test_twodim_base.TestTri) ... ok
test_tril_indices (test_twodim_base.TestTrilIndices) ... ok
test_exceptions (test_twodim_base.TestTrilIndicesFrom) ... ok
test_triu_indices (test_twodim_base.TestTriuIndices) ... ok
test_exceptions (test_twodim_base.TestTriuIndicesFrom) ... ok
test_asfarray (test_type_check.TestArrayConversion) ... ok
test_basic (test_type_check.TestCommonType) ... ok
test_cmplx (test_type_check.TestImag) ... ok
test_real (test_type_check.TestImag) ... ok
test_fail (test_type_check.TestIscomplex) ... ok
test_pass (test_type_check.TestIscomplex) ... ok
test_basic (test_type_check.TestIscomplexobj) ... ok
test_complex (test_type_check.TestIsfinite) ... ok
test_complex1 (test_type_check.TestIsfinite) ... ok
test_goodvalues (test_type_check.TestIsfinite) ... ok
test_ind (test_type_check.TestIsfinite) ... ok
test_integer (test_type_check.TestIsfinite) ... ok
test_neginf (test_type_check.TestIsfinite) ... ok
test_posinf (test_type_check.TestIsfinite) ... ok
test_goodvalues (test_type_check.TestIsinf) ... ok
test_ind (test_type_check.TestIsinf) ... ok
test_neginf (test_type_check.TestIsinf) ... ok
test_neginf_scalar (test_type_check.TestIsinf) ... ok
test_posinf (test_type_check.TestIsinf) ... ok
test_posinf_scalar (test_type_check.TestIsinf) ... ok
test_complex (test_type_check.TestIsnan) ... ok
test_complex1 (test_type_check.TestIsnan) ... ok
test_goodvalues (test_type_check.TestIsnan) ... ok
test_ind (test_type_check.TestIsnan) ... ok
test_integer (test_type_check.TestIsnan) ... ok
test_neginf (test_type_check.TestIsnan) ... ok
test_posinf (test_type_check.TestIsnan) ... ok
test_generic (test_type_check.TestIsneginf) ... ok
test_generic (test_type_check.TestIsposinf) ... ok
test_fail (test_type_check.TestIsreal) ... ok
test_pass (test_type_check.TestIsreal) ... ok
test_basic (test_type_check.TestIsrealobj) ... ok
test_basic (test_type_check.TestIsscalar) ... ok
test_default_1 (test_type_check.TestMintypecode) ... ok
test_default_2 (test_type_check.TestMintypecode) ... ok
test_default_3 (test_type_check.TestMintypecode) ... ok
test_complex_bad (test_type_check.TestNanToNum) ... ok
test_complex_bad2 (test_type_check.TestNanToNum) ... ok
test_complex_good (test_type_check.TestNanToNum) ... ok
test_generic (test_type_check.TestNanToNum) ... ok
test_integer (test_type_check.TestNanToNum) ... ok
test_cmplx (test_type_check.TestReal) ... ok
test_real (test_type_check.TestReal) ... ok
test_basic (test_type_check.TestRealIfClose) ... ok
test_fix (test_ufunclike.TestUfunclike) ... ok
test_fix_with_subclass (test_ufunclike.TestUfunclike) ... ok
test_isneginf (test_ufunclike.TestUfunclike) ... ok
test_isposinf (test_ufunclike.TestUfunclike) ... ok
test_log2 (test_ufunclike.TestUfunclike) ... ok
test_utils.test_lookfor ... ok
test_utils.test_deprecate_decorator ... ok
test_utils.test_deprecate_decorator_message ... ok
test_utils.test_deprecate_fn ... ok
test_lapack (test_build.TestF77Mismatch) ... SKIP: Skipping test: test_lapack
Skipping fortran compiler mismatch on non Linux platform
test_square (test_linalg.TestBoolPower) ... ok
test_cdouble (test_linalg.TestCond2) ... ok
test_cdouble_2 (test_linalg.TestCond2) ... ok
test_csingle (test_linalg.TestCond2) ... ok
test_double (test_linalg.TestCond2) ... ok
test_double_2 (test_linalg.TestCond2) ... ok
test_empty (test_linalg.TestCond2) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestCond2) ... ok
test_single (test_linalg.TestCond2) ... ok
test (test_linalg.TestCondInf) ... ok
test_cdouble (test_linalg.TestCondSVD) ... ok
test_cdouble_2 (test_linalg.TestCondSVD) ... ok
test_csingle (test_linalg.TestCondSVD) ... ok
test_double (test_linalg.TestCondSVD) ... ok
test_double_2 (test_linalg.TestCondSVD) ... ok
test_empty (test_linalg.TestCondSVD) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestCondSVD) ... ok
test_single (test_linalg.TestCondSVD) ... ok
test_cdouble (test_linalg.TestDet) ... ok
test_cdouble_2 (test_linalg.TestDet) ... ok
test_csingle (test_linalg.TestDet) ... ok
test_double (test_linalg.TestDet) ... ok
test_double_2 (test_linalg.TestDet) ... ok
test_empty (test_linalg.TestDet) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestDet) ... ok
test_single (test_linalg.TestDet) ... ok
test_zero (test_linalg.TestDet) ... ok
test_cdouble (test_linalg.TestEig) ... ok
test_cdouble_2 (test_linalg.TestEig) ... ok
test_csingle (test_linalg.TestEig) ... ok
test_double (test_linalg.TestEig) ... ok
test_double_2 (test_linalg.TestEig) ... ok
test_empty (test_linalg.TestEig) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestEig) ... ok
test_single (test_linalg.TestEig) ... ok
test_cdouble (test_linalg.TestEigh) ... ok
test_csingle (test_linalg.TestEigh) ... ok
test_double (test_linalg.TestEigh) ... ok
test_empty (test_linalg.TestEigh) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestEigh) ... ok
test_single (test_linalg.TestEigh) ... ok
test_cdouble (test_linalg.TestEigvals) ... ok
test_cdouble_2 (test_linalg.TestEigvals) ... ok
test_csingle (test_linalg.TestEigvals) ... ok
test_double (test_linalg.TestEigvals) ... ok
test_double_2 (test_linalg.TestEigvals) ... ok
test_empty (test_linalg.TestEigvals) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestEigvals) ... ok
test_single (test_linalg.TestEigvals) ... ok
test_cdouble (test_linalg.TestEigvalsh) ... ok
test_csingle (test_linalg.TestEigvalsh) ... ok
test_double (test_linalg.TestEigvalsh) ... ok
test_empty (test_linalg.TestEigvalsh) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestEigvalsh) ... ok
test_single (test_linalg.TestEigvalsh) ... ok
test_cdouble (test_linalg.TestInv) ... ok
test_cdouble_2 (test_linalg.TestInv) ... ok
test_csingle (test_linalg.TestInv) ... ok
test_double (test_linalg.TestInv) ... ok
test_double_2 (test_linalg.TestInv) ... ok
test_empty (test_linalg.TestInv) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestInv) ... ok
test_single (test_linalg.TestInv) ... ok
test_cdouble (test_linalg.TestLstsq) ... ok
test_cdouble_2 (test_linalg.TestLstsq) ... ok
test_cdouble_nsq_1 (test_linalg.TestLstsq) ... ok
test_cdouble_nsq_1_2 (test_linalg.TestLstsq) ... ok
test_cdouble_nsq_2 (test_linalg.TestLstsq) ... ok
test_cdouble_nsq_2_2 (test_linalg.TestLstsq) ... ok
test_csingle (test_linalg.TestLstsq) ... ok
test_csingle_nsq_1 (test_linalg.TestLstsq) ... ok
test_csingle_nsq_2 (test_linalg.TestLstsq) ... ok
test_double (test_linalg.TestLstsq) ... ok
test_double_2 (test_linalg.TestLstsq) ... ok
test_double_nsq_1 (test_linalg.TestLstsq) ... ok
test_double_nsq_2 (test_linalg.TestLstsq) ... ok
test_empty (test_linalg.TestLstsq) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestLstsq) ... ok
test_single (test_linalg.TestLstsq) ... ok
test_single_nsq_1 (test_linalg.TestLstsq) ... ok
test_single_nsq_2 (test_linalg.TestLstsq) ... ok
test_invert_noninvertible (test_linalg.TestMatrixPower) ... ok
test_large_power (test_linalg.TestMatrixPower) ... ok
test_large_power_trailing_zero (test_linalg.TestMatrixPower) ... ok
testip_invert (test_linalg.TestMatrixPower) ... ok
testip_one (test_linalg.TestMatrixPower) ... ok
testip_two (test_linalg.TestMatrixPower) ... ok
testip_zero (test_linalg.TestMatrixPower) ... ok
test_empty (test_linalg.TestNormDouble) ... ok
test_matrix (test_linalg.TestNormDouble) ... ok
test_vector (test_linalg.TestNormDouble) ... ok
test_empty (test_linalg.TestNormSingle) ... ok
test_matrix (test_linalg.TestNormSingle) ... ok
test_vector (test_linalg.TestNormSingle) ... ok
test_cdouble (test_linalg.TestPinv) ... ok
test_cdouble_2 (test_linalg.TestPinv) ... ok
test_csingle (test_linalg.TestPinv) ... ok
test_double (test_linalg.TestPinv) ... ok
test_double_2 (test_linalg.TestPinv) ... ok
test_empty (test_linalg.TestPinv) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestPinv) ... ok
test_single (test_linalg.TestPinv) ... ok
test_cdouble (test_linalg.TestSVD) ... ok
test_cdouble_2 (test_linalg.TestSVD) ... ok
test_csingle (test_linalg.TestSVD) ... ok
test_double (test_linalg.TestSVD) ... ok
test_double_2 (test_linalg.TestSVD) ... ok
test_empty (test_linalg.TestSVD) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestSVD) ... ok
test_single (test_linalg.TestSVD) ... ok
test_cdouble (test_linalg.TestSolve) ... ok
test_cdouble_2 (test_linalg.TestSolve) ... ok
test_csingle (test_linalg.TestSolve) ... ok
test_double (test_linalg.TestSolve) ... ok
test_double_2 (test_linalg.TestSolve) ... ok
test_empty (test_linalg.TestSolve) ... ok
Check that matrix type is preserved. ... ok
Check that matrix type is preserved. ... ok
test_nonarray (test_linalg.TestSolve) ... ok
test_single (test_linalg.TestSolve) ... ok
test_linalg.test_matrix_rank(4, 4) ... ok
test_linalg.test_matrix_rank(3, 3) ... ok
test_linalg.test_matrix_rank(0, 0) ... ok
test_linalg.test_matrix_rank(1, 1) ... ok
test_linalg.test_matrix_rank(0, 0) ... ok
test_linalg.test_matrix_rank(1, 1) ... ok
test_linalg.test_matrix_rank(<type 'exceptions.TypeError'>, <function matrix_rank at 0x705530>, array([[[ 0.,  0.], ... ok
test_linalg.test_matrix_rank(1, 1) ... ok
Ticket #652 ... ok
Ticket 662. ... ok
test_lapack_endian (test_regression.TestRegression) ... ok
Regression for #786: Froebenius norm for vectors raises ... ok
Ticket 627. ... ok
Tests _check_fill_value with records ... ok
Test _check_fill_value ... ok
Tests extremum fill values for flexible type. ... ok
Yet more fun with the fill_value ... ok
Test adding a fill_value parameter to empty/ones/zeros ... ok
Tests the behavior of fill_value during conversion ... ok
Tests yet more exotic flexible dtypes ... ok
Check that fill_value is always defined for structured arrays ... ok
Test setting fill_value on individual fields ... ok
test_asarray (test_core.TestMaskedArray) ... ok
Checks masking a scalar ... ok
Test of basic array creation and properties in 1 dimension. ... ok
Test of basic array creation and properties in 2 dimensions. ... ok
Tests some basic array attributes. ... ok
Tests concatenations. ... ok
Tests concatenations. ... ok
Tests the concatenation on flexible arrays. ... ok
Tests of some subtle points of copying and sizing. ... ok
Tests how masks are initialized at the creation of Maskedarrays. ... ok
Check the use of ndmin ... ok
Make sure we're not losing the original mask w/ ndmin ... ok
Tests creaating a masked array from alist of masked arrays. ... ok
test_deepcopy (test_core.TestMaskedArray) ... ok
Test printing a masked array w/ fancy dtype. ... ok
Test filled w/ flexible dtype ... ok
Test filled w/ mvoid ... ok
Test filled w/ nested dtype ... ok
Checks fix_invalid. ... ok
Test flatten_structured_array on arrays ... ok
Tests conversions and indexing ... ok
Test of masked element ... ok
Test mvoid.__getitem__ ... ok
Test iteration on __getitem__ ... ok
Test printing a mvoid ... ok
Test of other odd features ... ok
Tests some more features. ... ok
Tests some generic features. ... ok
Checks that _optinfo dictionary isn't back-propagated ... ok
Tests pickling ... ok
Tests pickling w/ F_CONTIGUOUS arrays ... ok
Test pickling w/ a subclass of ndarray ... ok
Tests pickling w/ structured array ... ok
Tests setting elements with object ... ok
Tests single element subscripts of Maskedarrays. ... ok
Tests some communication issues with Python. ... ok
Test creating a mvoid object ... ok
Test of take, transpose, inner, outer products ... ok
Tests add, sum, product. ... ok
Checks that there's no collapsing to masked ... ok
Check that we're not losing the shape of a singleton ... ok
Test of basic arithmetic. ... ok
Test various functions such as sin, cos. ... ok
Test binary operations on 2D data ... ok
Tests count ... ok
test_divide_on_different_shapes (test_core.TestMaskedArrayArithmetic) ... ok
Test domained binary operations on 2D data ... ok
Test the equality of structured arrays ... ok
test_eq_w_None (test_core.TestMaskedArrayArithmetic) ... ok
test_eq_w_scalar (test_core.TestMaskedArrayArithmetic) ... ok
Check complex ... ok
test_limits_arithmetic (test_core.TestMaskedArrayArithmetic) ... ok
Tests some scalar arithmetics on MaskedArrays. ... ok
Tests (in)equality on masked snigleton ... ok
test_methods_with_output (test_core.TestMaskedArrayArithmetic) ... ok
test_minimummaximum_func (test_core.TestMaskedArrayArithmetic) ... ok
Tests minimum and maximum. ... ok
Tests the min/max functions with explicit outputs ... ok
Additional tests on max/min ... ok
Test np.min/maximum.reduce on array w/ full False mask ... ok
Tests mixed arithmetics. ... ok
Tests mod ... ok
Test the equality of structured arrays ... ok
Check that we don't shrink a mask when not wanted ... ok
Check that the mask is not back-propagated when using numpy functions ... ok
test_scalar_arithmetic (test_core.TestMaskedArrayArithmetic) ... ok
Test flat on masked_matrices ... ok
Test hard_mask ... ok
Another test of hardmask ... ok
OK, yet another test of hardmask ... ok
Tests the keep mask flag ... ok
Tests .shrink_mask() ... ok
Checks the behaviour of _smallmask ... ok
Test choose ... ok
Test choose with an explicit out keyword ... ok
Tests flatten mask ... ok
test_identity (test_core.TestMaskedArrayFunctions) ... ok
Test make_mask ... ok
Test make_mask_descr ... ok
test_mask_or (test_core.TestMaskedArrayFunctions) ... ok
test_masked_equal_fill_value (test_core.TestMaskedArrayFunctions) ... ok
test_masked_equal_wlist (test_core.TestMaskedArrayFunctions) ... ok
test_masked_otherfunctions (test_core.TestMaskedArrayFunctions) ... ok
test_masked_where_bool (test_core.TestMaskedArrayFunctions) ... ok
Tests masking functions. ... ok
Tests some generic features. ... ok
test_masked_where_shape_constraint (test_core.TestMaskedArrayFunctions) ... ok
Test functions on ndarrays ... ok
test_power (test_core.TestMaskedArrayFunctions) ... ok
test_reshape (test_core.TestMaskedArrayFunctions) ... ok
test_round (test_core.TestMaskedArrayFunctions) ... ok
Testing round with an explicit output ... ok
Test the where function ... ok
Test the type conservation with where ... ok
test_where_with_masked_choice (test_core.TestMaskedArrayFunctions) ... ok
test_where_with_masked_condition (test_core.TestMaskedArrayFunctions) ... ok
Test keeping data w/ (inplace) addition ... ok
test_datafriendly_add_arrays (test_core.TestMaskedArrayInPlaceArithmetics) ... ok
Test keeping data w/ (inplace) division ... ok
Test keeping data w/ (inplace) multiplication ... ok
test_datafriendly_mul_arrays (test_core.TestMaskedArrayInPlaceArithmetics) ... ok
Test keeping data w/ (inplace) power ... ok
Test keeping data w/ (inplace) subtraction ... ok
test_datafriendly_sub_arrays (test_core.TestMaskedArrayInPlaceArithmetics) ... ok
Test of inplace additions ... ok
Test of inplace additions ... ok
Test of inplace division ... ok
test_inplace_division_misc (test_core.TestMaskedArrayInPlaceArithmetics) ... ok
Test of inplace division ... ok
Test of inplace division ... ok
Test of inplace multiplication ... ok
Test of inplace multiplication ... ok
Test of inplace subtractions ... ok
Test of inplace subtractions ... ok
Test the combination nomask & methods w/ axis ... ok
Tests cumsum & cumprod on MaskedArrays. ... ok
Tests cumsum/cumprod w/ output ... ok
Test diag ... ok
Test mean/anom on object dtype ... ok
Test prod on object dtype ... ok
Tests ptp on MaskedArrays. ... ok
Test sum on object dtype ... ok
Tests trace on MaskedArrays. ... ok
Tests var & std on MaskedArrays. ... ok
test_varstd_ddof (test_core.TestMaskedArrayMathMethods) ... ok
Test a special case for var ... ok
Tests var & std on MaskedArrays. ... ok
Checks the any/all methods/functions. ... ok
Some fun with all and any ... ok
test_allany_onmatrices (test_core.TestMaskedArrayMethods) ... ok
Tests allclose on arrays ... ok
Tests argmin & argmax on MaskedArrays. ... ok
Test argsort ... ok
Test a _arraymethod w/ n argument ... ok
Tests clip on MaskedArrays. ... ok
test compress ... ok
Tests compressed ... ok
Tests empty/like ... ok
Test the reconstruction of a masked_array from a record ... ok
Tests some MaskedArray methods. ... ok
Tests put. ... ok
Tests put on hardmask ... ok
test_putmask (test_core.TestMaskedArrayMethods) ... ok
Tests ravel ... ok
Tests reshape ... ok
Test sort ... ok
Check sort of 2D array. ... ok
Test sort on flexible dtype. ... ok
Check squeeze ... ok
Tests swapaxes on MaskedArrays. ... ok
Tests take ... ok
Test take w/ masked indices ... ok
Test the conversion to records ... ok
Tests to list ... ok
Test mvoid.tolist: make sure we return a standard Python object ... ok
test_getitem (test_core.TestMaskedFields) ... ok
Test getmaskarray on flexible dtype ... ok
Check record access ... ok
Check setting an element of a record) ... ok
test_set_record_slice (test_core.TestMaskedFields) ... ok
test_set_records_masks (test_core.TestMaskedFields) ... ok
Test view w/ flexible dtype ... ok
test_view_to_dtype_and_type (test_core.TestMaskedView) ... ok
test_view_to_flexible_dtype (test_core.TestMaskedView) ... ok
test_view_to_nothing (test_core.TestMaskedView) ... ok
test_view_to_simple_dtype (test_core.TestMaskedView) ... ok
test_view_to_subdtype (test_core.TestMaskedView) ... ok
test_view_to_type (test_core.TestMaskedView) ... ok
Tests extrema on MaskedArrays. ... ok
Check that the mask of the result is a ndarray (not a MaskedArray...) ... ok
Tests reduce on MaskedArrays. ... ok
Tests new ufuncs on MaskedArrays. ... ok
test_core.test_masked_array ... ok
Tests compress2d ... ok
Tests dot product ... ok
Tests mask_rowcols. ... ok
test_3d (test_extras.TestApplyAlongAxis) ... ok
test_basic (test_extras.TestApplyOverAxes) ... ok
Tests mediff1d ... ok
Test ediff1d w/ a ndarray ... ok
Test ediff1d w/ to_begin ... ok
Test ediff1d w/ to_begin and to_end ... ok
Test ediff1d w/ to_end ... ok
Test in1d ... ok
Test intersect1d ... ok
Test setdiff1d ... ok
Test setdiff1d_charray ... ok
Test setxor1d ... ok
Test union1d ... ok
Test all masked ... ok
Test unique on list ... ok
Test unique on masked data w/use_mask=True ... ok
Test average on integers with mask ... ok
Test of average. ... ok
More tests of average. ... ok
Yet more tests of average! ... ok
Tests mr_ on 1D arrays. ... ok
Tests mr_ on 2D arrays. ... ok
Test corrcoef 1 1D variable w/missing values ... ok
Test cov on 1D variable w/o missing values ... ok
Test corrcoef on 2D variable w/ missing value ... ok
Test corrcoef on 1 2D variable w/o missing values ... ok
Test ddof keyword ... ok
Test cov 1 1D variable w/missing values ... ok
Test cov on 1D variable w/o missing values ... ok
Test cov on 2D variable w/ missing value ... ok
Test cov on 1 2D variable w/o missing values ... ok
Test clump_masked ... ok
Test clump_unmasked ... ok
Tests masked_all ... ok
Tests masked_all ... ok
Tests median w/ 2D ... ok
Tests median w/ 2D arrays and different axis. ... ok
Tests median w/ 3D ... ok
Tests notmasked_contiguous ... ok
Tests unmasked_edges ... ok
Tests polyfit ... ok
test_atleast1d (test_extras.TestShapeBase) ... ok
Test creation by view ... ok
Test that 'exotic' formats are processed properly ... ok
Test filling the array ... ok
Tests fields retrieval ... ok
Test hardmask ... ok
Test pickling ... ok
test_set_elements (test_mrecords.TestMRecords) ... ok
Tests setting fields. ... ok
Tests setting the mask of a field. ... ok
test_set_mask (test_mrecords.TestMRecords) ... ok
test_set_mask_fromarray (test_mrecords.TestMRecords) ... ok
test_set_mask_fromfields (test_mrecords.TestMRecords) ... ok
Tests setting slices w/ hardmask. ... ok
Test tolist. ... ok
Test the creation w/ format and names ... ok
Tests addfield ... ok
test_fromarrays (test_mrecords.TestMRecordsImport) ... ok
Test construction from records. ... ok
Tests construction from records w/ mask. ... ok
Tests reading from a text file. ... ok
test_view_by_itself (test_mrecords.TestView) ... ok
test_view_flexible_type (test_mrecords.TestView) ... ok
test_view_simple_dtype (test_mrecords.TestView) ... ok
test_clip (test_old_ma.TestArrayMethods) ... ok
test_cumprod (test_old_ma.TestArrayMethods) ... ok
test_cumsum (test_old_ma.TestArrayMethods) ... ok
test_ptp (test_old_ma.TestArrayMethods) ... ok
test_swapaxes (test_old_ma.TestArrayMethods) ... ok
test_trace (test_old_ma.TestArrayMethods) ... ok
test_varstd (test_old_ma.TestArrayMethods) ... ok
test_testAPI (test_old_ma.TestMa) ... ok
Test add, sum, product. ... ok
Test of basic arithmetic. ... ok
test_testArrayAttributes (test_old_ma.TestMa) ... ok
test_testArrayMethods (test_old_ma.TestMa) ... ok
Test of average. ... ok
More tests of average. ... ok
Test of basic array creation and properties in 1 dimension. ... ok
Test of basic array creation and properties in 2 dimensions. ... ok
Test of conversions and indexing ... ok
Tests of some subtle points of copying and sizing. ... ok
Test of inplace operations and rich comparisons ... ok
test_testMaPut (test_old_ma.TestMa) ... ok
Test of masked element ... ok
Test of minumum, maximum. ... ok
test_testMixedArithmetic (test_old_ma.TestMa) ... ok
Test of other odd features ... ok
Test of pickling ... ok
Test of put ... ok
test_testScalarArithmetic (test_old_ma.TestMa) ... ok
test_testSingleElementSubscript (test_old_ma.TestMa) ... ok
Test of take, transpose, inner, outer products ... ok
test_testToPython (test_old_ma.TestMa) ... ok
Test various functions such as sin, cos. ... ok
Test count ... ok
test_minmax (test_old_ma.TestUfuncs) ... ok
test_nonzero (test_old_ma.TestUfuncs) ... ok
test_reduce (test_old_ma.TestUfuncs) ... ok
test_testUfuncRegression (test_old_ma.TestUfuncs) ... ok
Ticket #61 ... ok
Ticket #17 ... ok
Ticket #254 ... ok
Ticket #271 ... ok
Ticket #1256 ... ok
Ticket #62 ... ok
test_attributepropagation (test_subclassing.TestSubclassing) ... ok
Tests whether the subclass is kept. ... ok
Tests domained_masked_binary_operation ... ok
Tests masked_unary_operation ... ok
Tests subclassing MaskedArray ... ok
Checks that masked_array(...,subok=True) preserves the class. ... ok
test_basic (test_defmatrix.TestAlgebra) ... ok
Check that 'not implemented' operations produce a failure. ... ok
Test raising a matrix to an integer power works as expected. ... ok
test_basic (test_defmatrix.TestCasting) ... ok
test_basic (test_defmatrix.TestCtor) ... ok
test_bmat_nondefault_str (test_defmatrix.TestCtor) ... ok
test_basic (test_defmatrix.TestIndexing) ... ok
test_instance_methods (test_defmatrix.TestMatrixReturn) ... ok
test_array_from_matrix_list (test_defmatrix.TestNewScalarIndexing) ... ok
test_array_to_list (test_defmatrix.TestNewScalarIndexing) ... ok
test_boolean_indexing (test_defmatrix.TestNewScalarIndexing) ... ok
test_dimesions (test_defmatrix.TestNewScalarIndexing) ... ok
test_fancy_indexing (test_defmatrix.TestNewScalarIndexing) ... ok
test_list_indexing (test_defmatrix.TestNewScalarIndexing) ... ok
test_matrix_element (test_defmatrix.TestNewScalarIndexing) ... ok
test_row_column_indexing (test_defmatrix.TestNewScalarIndexing) ... ok
test_scalar_indexing (test_defmatrix.TestNewScalarIndexing) ... ok
test_list (test_defmatrix.TestPower) ... ok
test_returntype (test_defmatrix.TestPower) ... ok
test_asmatrix (test_defmatrix.TestProperties) ... ok
test_basic (test_defmatrix.TestProperties) ... ok
test_comparisons (test_defmatrix.TestProperties) ... ok
test_max (test_defmatrix.TestProperties) ... ok
test_min (test_defmatrix.TestProperties) ... ok
test_noaxis (test_defmatrix.TestProperties) ... ok
test_pinv (test_defmatrix.TestProperties) ... ok
test_prod (test_defmatrix.TestProperties) ... ok
test_ptp (test_defmatrix.TestProperties) ... ok
test_repr (test_defmatrix.TestProperties) ... ok
Test whether matrix.sum(axis=1) preserves orientation. ... ok
test_var (test_defmatrix.TestProperties) ... ok
test_keywords (test_multiarray.TestView) ... ok
test_type (test_multiarray.TestView) ... ok
test_matscalar (test_numeric.TestDot) ... ok
Ticket #71 ... ok
Ticket #473 ... ok
Ticket #125 ... ok
Ticket #83 ... ok
test_oldtypes (test_oldnumeric.test_oldtypes) ... ok
Ticket #552 ... ok
test_chebadd (test_chebyshev.TestArithmetic) ... ok
test_chebdiv (test_chebyshev.TestArithmetic) ... ok
test_chebmul (test_chebyshev.TestArithmetic) ... ok
test_chebmulx (test_chebyshev.TestArithmetic) ... ok
test_chebsub (test_chebyshev.TestArithmetic) ... ok
test_chebval (test_chebyshev.TestArithmetic) ... ok
test_chebder (test_chebyshev.TestCalculus) ... ok
test_chebint (test_chebyshev.TestCalculus) ... ok
test_add (test_chebyshev.TestChebyshevClass) ... ok
test_call (test_chebyshev.TestChebyshevClass) ... ok
test_convert (test_chebyshev.TestChebyshevClass) ... ok
test_copy (test_chebyshev.TestChebyshevClass) ... ok
test_degree (test_chebyshev.TestChebyshevClass) ... ok
test_deriv (test_chebyshev.TestChebyshevClass) ... ok
test_divmod (test_chebyshev.TestChebyshevClass) ... ok
test_equal (test_chebyshev.TestChebyshevClass) ... ok
test_fit (test_chebyshev.TestChebyshevClass) ... ok
test_floordiv (test_chebyshev.TestChebyshevClass) ... ok
test_fromroots (test_chebyshev.TestChebyshevClass) ... ok
test_identity (test_chebyshev.TestChebyshevClass) ... ok
test_integ (test_chebyshev.TestChebyshevClass) ... ok
test_linspace (test_chebyshev.TestChebyshevClass) ... ok
test_mapparms (test_chebyshev.TestChebyshevClass) ... ok
test_mod (test_chebyshev.TestChebyshevClass) ... ok
test_mul (test_chebyshev.TestChebyshevClass) ... ok
test_not_equal (test_chebyshev.TestChebyshevClass) ... ok
test_pow (test_chebyshev.TestChebyshevClass) ... ok
test_roots (test_chebyshev.TestChebyshevClass) ... ok
test_sub (test_chebyshev.TestChebyshevClass) ... ok
test_trim (test_chebyshev.TestChebyshevClass) ... ok
test_trimdeg (test_chebyshev.TestChebyshevClass) ... ok
test_truncate (test_chebyshev.TestChebyshevClass) ... ok
test_chebdomain (test_chebyshev.TestConstants) ... ok
test_chebone (test_chebyshev.TestConstants) ... ok
test_chebx (test_chebyshev.TestConstants) ... ok
test_chebzero (test_chebyshev.TestConstants) ... ok
test_cheb2poly (test_chebyshev.TestMisc) ... ok
test_chebfit (test_chebyshev.TestMisc) ... ok
test_chebfromroots (test_chebyshev.TestMisc) ... ok
test_chebline (test_chebyshev.TestMisc) ... ok
test_chebpts1 (test_chebyshev.TestMisc) ... ok
test_chebpts2 (test_chebyshev.TestMisc) ... ok
test_chebroots (test_chebyshev.TestMisc) ... ok
test_chebtrim (test_chebyshev.TestMisc) ... ok
test_chebvander (test_chebyshev.TestMisc) ... ok
test_poly2cheb (test_chebyshev.TestMisc) ... ok
test__cseries_to_zseries (test_chebyshev.TestPrivate) ... ok
test__zseries_to_cseries (test_chebyshev.TestPrivate) ... ok
test_polyadd (test_polynomial.TestArithmetic) ... ok
test_polydiv (test_polynomial.TestArithmetic) ... ok
test_polymul (test_polynomial.TestArithmetic) ... ok
test_polymulx (test_polynomial.TestArithmetic) ... ok
test_polysub (test_polynomial.TestArithmetic) ... ok
test_polyval (test_polynomial.TestArithmetic) ... ok
test_polyder (test_polynomial.TestCalculus) ... ok
test_polyint (test_polynomial.TestCalculus) ... ok
test_polydomain (test_polynomial.TestConstants) ... ok
test_polyone (test_polynomial.TestConstants) ... ok
test_polyx (test_polynomial.TestConstants) ... ok
test_polyzero (test_polynomial.TestConstants) ... ok
test_polyfit (test_polynomial.TestMisc) ... ok
test_polyfromroots (test_polynomial.TestMisc) ... ok
test_polyline (test_polynomial.TestMisc) ... ok
test_polyroots (test_polynomial.TestMisc) ... ok
test_polytrim (test_polynomial.TestMisc) ... ok
test_polyvander (test_polynomial.TestMisc) ... ok
test_add (test_polynomial.TestPolynomialClass) ... ok
test_call (test_polynomial.TestPolynomialClass) ... ok
test_convert (test_polynomial.TestPolynomialClass) ... ok
test_copy (test_polynomial.TestPolynomialClass) ... ok
test_degree (test_polynomial.TestPolynomialClass) ... ok
test_deriv (test_polynomial.TestPolynomialClass) ... ok
test_divmod (test_polynomial.TestPolynomialClass) ... ok
test_equal (test_polynomial.TestPolynomialClass) ... ok
test_fit (test_polynomial.TestPolynomialClass) ... ok
test_floordiv (test_polynomial.TestPolynomialClass) ... ok
test_fromroots (test_polynomial.TestPolynomialClass) ... ok
test_identity (test_polynomial.TestPolynomialClass) ... ok
test_integ (test_polynomial.TestPolynomialClass) ... ok
test_linspace (test_polynomial.TestPolynomialClass) ... ok
test_mapparms (test_polynomial.TestPolynomialClass) ... ok
test_mod (test_polynomial.TestPolynomialClass) ... ok
test_mul (test_polynomial.TestPolynomialClass) ... ok
test_not_equal (test_polynomial.TestPolynomialClass) ... ok
test_pow (test_polynomial.TestPolynomialClass) ... ok
test_roots (test_polynomial.TestPolynomialClass) ... ok
test_sub (test_polynomial.TestPolynomialClass) ... ok
test_trim (test_polynomial.TestPolynomialClass) ... ok
test_trimdeg (test_polynomial.TestPolynomialClass) ... ok
test_truncate (test_polynomial.TestPolynomialClass) ... ok
test_getdomain (test_polyutils.TestDomain) ... ok
test_mapdomain (test_polyutils.TestDomain) ... ok
test_mapparms (test_polyutils.TestDomain) ... ok
test_as_series (test_polyutils.TestMisc) ... ok
test_trimcoef (test_polyutils.TestMisc) ... ok
test_trimseq (test_polyutils.TestMisc) ... ok
test_basic (test_random.TestMultinomial) ... ok
test_int_negative_interval (test_random.TestMultinomial) ... ok
test_zero_probability (test_random.TestMultinomial) ... ok
Make sure generated random variables are in [-pi, pi]. ... ok
Test for ticket #921 ... ok
Test for ticket #923 ... ok
test_permutation_longs (test_random.TestRegression) ... ok
Make sure we can accept old state tuples that do not have the cached ... ok
test_basic (test_random.TestSetState) ... ok
Make sure the cached every-other-Gaussian is reset. ... ok
When the state is saved with a cached Gaussian, make sure the cached ... ok
Ensure that the negative binomial results take floating point ... ok
test_decorators.test_slow ... ok
test_decorators.test_setastest ... ok
test_decorators.test_skip_functions_hardcoded ... ok
test_decorators.test_skip_functions_callable ... ok
test_decorators.test_skip_generators_hardcoded ... ok
test_decorators.test_skip_generators_callable ... ok
Test two arrays with different shapes are found not equal. ... ok
Test two equal array of rank 1 are found equal. ... ok
Test two different array of rank 1 are found not equal. ... ok
Test two equal array of rank 2 are found equal. ... ok
test_complex (test_utils.TestAlmostEqual) ... ok
test_complex_item (test_utils.TestAlmostEqual) ... ok
test_inf_item (test_utils.TestAlmostEqual) ... ok
test_nan_item (test_utils.TestAlmostEqual) ... ok
Test object arrays. ... ok
test_simple_item (test_utils.TestAlmostEqual) ... ok
test_nan_array (test_utils.TestApproxEqual) ... ok
test_nan_items (test_utils.TestApproxEqual) ... ok
test_simple_arrays (test_utils.TestApproxEqual) ... ok
test_simple_items (test_utils.TestApproxEqual) ... ok
Test two arrays with different shapes are found not equal. ... ok
Test two equal array of rank 1 are found equal. ... ok
Test two different array of rank 1 are found not equal. ... ok
Test two equal array of rank 2 are found equal. ... ok
test_nan (test_utils.TestArrayAlmostEqual) ... ok
Test object arrays. ... ok
test_simple (test_utils.TestArrayAlmostEqual) ... ok
test_big_float32 (test_utils.TestArrayAlmostEqualNulp) ... ok
test_big_float64 (test_utils.TestArrayAlmostEqualNulp) ... ok
test_complex (test_utils.TestArrayAlmostEqualNulp) ... ok
test_complex2 (test_utils.TestArrayAlmostEqualNulp) ... ok
test_simple (test_utils.TestArrayAlmostEqualNulp) ... ok
test_simple2 (test_utils.TestArrayAlmostEqualNulp) ... ok
Test two arrays with different shapes are found not equal. ... ok
Test two equal array of rank 1 are found equal. ... ok
Test two different array of rank 1 are found not equal. ... ok
Test two equal array of rank 2 are found equal. ... ok
Test rank 1 array for all dtypes. ... ok
Test rank 3 array for all dtypes. ... ok
Test arrays with nan values in them. ... ok
Test object arrays. ... ok
Test record arrays. ... ok
Test two arrays with different shapes are found not equal. ... ok
test_simple (test_utils.TestAssertAllclose) ... ok
Test two arrays with different shapes are found not equal. ... ok
Test two equal array of rank 1 are found equal. ... ok
Test two different array of rank 1 are found not equal. ... ok
Test two equal array of rank 2 are found equal. ... ok
test_complex (test_utils.TestEqual) ... ok
test_complex_item (test_utils.TestEqual) ... ok
Test rank 1 array for all dtypes. ... ok
Test rank 3 array for all dtypes. ... ok
test_inf_items (test_utils.TestEqual) ... ok
Test arrays with nan values in them. ... ok
test_nan_items (test_utils.TestEqual) ... ok
test_negative_zero (test_utils.TestEqual) ... ok
test_non_numeric (test_utils.TestEqual) ... ok
Test object arrays. ... ok
Test record arrays. ... ok
Test two arrays with different shapes are found not equal. ... ok
test_catch_no_raise (test_utils.TestRaises) ... ok
test_correct_catch (test_utils.TestRaises) ... ok
test_wrong_exception (test_utils.TestRaises) ... ok
test_double (test_utils.TestULP) ... ok
test_equal (test_utils.TestULP) ... ok
test_inf (test_utils.TestULP) ... ok
test_nan (test_utils.TestULP) ... ok
test_single (test_utils.TestULP) ... ok
test_warn (test_utils.TestWarns) ... ok
test_warn_wrong_warning (test_utils.TestWarns) ... ok
test_basic (test_ctypeslib.TestLoadLibrary) ... ok
Regression for #801: load_library with a full library name ... ok
test_dtype (test_ctypeslib.TestNdpointer) ... ok
test_flags (test_ctypeslib.TestNdpointer) ... ok
test_ndim (test_ctypeslib.TestNdpointer) ... ok
test_shape (test_ctypeslib.TestNdpointer) ... ok
test_matlib.test_empty ... ok
test_matlib.test_ones ... ok
test_matlib.test_zeros ... ok
test_matlib.test_identity ... ok
test_matlib.test_eye ... ok
test_matlib.test_rand ... ok
test_matlib.test_randn ... ok
test_matlib.test_repmat ... ok

----------------------------------------------------------------------
Ran 2648 tests in 10.510s

OK (KNOWNFAIL=4, SKIP=2)
Running unit tests for numpy
NumPy version 1.5.1rc2
NumPy is installed in /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/numpy
Python version 2.6.6 (r266:84374, Aug 31 2010, 11:00:51) [GCC 4.0.1 (Apple Inc. build 5493)]
nose version 0.11.3
